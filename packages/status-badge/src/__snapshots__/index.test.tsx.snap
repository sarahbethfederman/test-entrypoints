// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StatusBadge should mount StatusBadge component with icon 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  border-radius: 12px;
  width: -webkit-min-content;
  width: -moz-min-content;
  width: min-content;
  padding-right: calc(0.5 * var(--lendi-ui-size));
  border: 1px solid rgba(78,192,0,1);
  color: rgba(78,192,0,1);
  background-color: rgba(246,251,242,1);
}

.c1 {
  line-height: 0;
}

.c3 {
  font-size: calc(0.75 * var(--lendi-ui-size));
  line-height: calc(16 / 12);
  font-family: 'Open Sans',sans-serif;
  margin-bottom: 0;
}

.c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(78,192,0,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(78,192,0,1);
}

<StatusBadge
  hasIcon={true}
  statusText="COMPLETED"
  variant="success"
>
  <styled.div
    variant="success"
    withIcon={true}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  ",
              "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
              ";
  display: flex;
  align-items: center;
  flex-direction: row;
  border-radius: 12px;
  width: min-content;
  ",
              [Function],
              "
  ",
              "
    padding-right: ",
              "calc(0.5 * var(--lendi-ui-size))",
              ";
  ",
              "
    ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      variant="success"
      withIcon={true}
    >
      <div
        className="c0"
      >
        <styled.span>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  line-height: 0;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <span
              className="c1"
            >
              <SvgCheck
                color="success.500"
                height="1em"
              >
                <styled.span
                  color="success.500"
                  height="1em"
                >
                  <StyledComponent
                    color="success.500"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-iwsKbI",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            "
  width: ",
                            [Function],
                            ";
  height: ",
                            [Function],
                            ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                            [Function],
                            ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                            [Function],
                            ";
  }
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-iwsKbI",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    height="1em"
                  >
                    <span
                      className="c2"
                      color="success.500"
                      height="1em"
                    >
                      <svg
                        viewBox="0 0 24 24"
                      >
                        <path
                          d="M0 0h24v24H0z"
                          fill="none"
                        />
                        <path
                          d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"
                        />
                      </svg>
                    </span>
                  </StyledComponent>
                </styled.span>
              </SvgCheck>
            </span>
          </StyledComponent>
        </styled.span>
        <styled.span
          size="sm"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dnqmqq",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dnqmqq",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="sm"
          >
            <span
              className="c3"
              size="sm"
            >
              COMPLETED
            </span>
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</StatusBadge>
`;

exports[`StatusBadge should mount StatusBadge component without icon 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  border-radius: 12px;
  width: -webkit-min-content;
  width: -moz-min-content;
  width: min-content;
  padding-right: calc(0.5 * var(--lendi-ui-size));
  border: 1px solid rgba(78,192,0,1);
  color: rgba(78,192,0,1);
  background-color: rgba(246,251,242,1);
}

.c1 {
  line-height: 0;
}

.c3 {
  font-size: calc(0.75 * var(--lendi-ui-size));
  line-height: calc(16 / 12);
  font-family: 'Open Sans',sans-serif;
  margin-bottom: 0;
}

.c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(78,192,0,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(78,192,0,1);
}

<StatusBadge
  hasIcon={true}
  icon={false}
  statusText="COMPLETED"
  variant="success"
>
  <styled.div
    icon={false}
    variant="success"
    withIcon={true}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  ",
              "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
              ";
  display: flex;
  align-items: center;
  flex-direction: row;
  border-radius: 12px;
  width: min-content;
  ",
              [Function],
              "
  ",
              "
    padding-right: ",
              "calc(0.5 * var(--lendi-ui-size))",
              ";
  ",
              "
    ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      icon={false}
      variant="success"
      withIcon={true}
    >
      <div
        className="c0"
      >
        <styled.span>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  line-height: 0;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <span
              className="c1"
            >
              <SvgCheck
                color="success.500"
                height="1em"
              >
                <styled.span
                  color="success.500"
                  height="1em"
                >
                  <StyledComponent
                    color="success.500"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-iwsKbI",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            "
  width: ",
                            [Function],
                            ";
  height: ",
                            [Function],
                            ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                            [Function],
                            ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                            [Function],
                            ";
  }
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-iwsKbI",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    height="1em"
                  >
                    <span
                      className="c2"
                      color="success.500"
                      height="1em"
                    >
                      <svg
                        viewBox="0 0 24 24"
                      >
                        <path
                          d="M0 0h24v24H0z"
                          fill="none"
                        />
                        <path
                          d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"
                        />
                      </svg>
                    </span>
                  </StyledComponent>
                </styled.span>
              </SvgCheck>
            </span>
          </StyledComponent>
        </styled.span>
        <styled.span
          size="sm"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dnqmqq",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dnqmqq",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="sm"
          >
            <span
              className="c3"
              size="sm"
            >
              COMPLETED
            </span>
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</StatusBadge>
`;
