// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`input should render the whole input component and a text input 1`] = `
.c0 {
  color: #474747;
}

.c1 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  box-sizing: border-box;
  border-radius: 6px;
  border: 1px solid #c8c8c8;
  width: auto;
  background-color: #ffffff;
  height: calc(3 * var(--lendi-ui-size));
  width: calc(21.5 * var(--lendi-ui-size));
}

.c1:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: color;
  -moz-var: color;
  -ms-var: color;
  var: color;
  return: color;
}

.c1:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  color: = theme_1.select('colors.shade.400');
}

.c1:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  color: = theme_1.select('colors.shade.0');
}

.c1:hover:not(:focus) border:1px solid function (_a) else {
  color: = theme_1.select('colors.error.500');
}

.c2 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c2::-webkit-input-placeholder {
  color: #adadad;
}

.c2::-moz-placeholder {
  color: #adadad;
}

.c2:-ms-input-placeholder {
  color: #adadad;
}

.c2::placeholder {
  color: #adadad;
}

.c2:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<Theme>
  <ThemeProvider
    theme={
      Object {
        "borderRadius": "6px",
        "colors": Object {
          "error.100": "#ffd1da",
          "error.200": "#ffa4b6",
          "error.25": "#fff3f5",
          "error.300": "#ff7692",
          "error.400": "#ff496e",
          "error.50": "#ffe8ec",
          "error.500": "#ff1c4a",
          "error.600": "#cc163b",
          "error.700": "#99102c",
          "error.800": "#660b1d",
          "error.900": "#33050e",
          "error.950": "#190207",
          "info.100": "#dae7f7",
          "info.200": "#b5d0ef",
          "info.25": "#f5f9fd",
          "info.300": "#91b9e8",
          "info.400": "#6ca2e0",
          "info.50": "#ecf3fb",
          "info.500": "#488bd9",
          "info.600": "#396fad",
          "info.700": "#2b5382",
          "info.800": "#1c3756",
          "info.900": "#0e1b2b",
          "info.950": "#070d15",
          "primary.100": "#ccf2ed",
          "primary.200": "#99e5db",
          "primary.25": "#f2fbfa",
          "primary.300": "#66d9c9",
          "primary.400": "#32ccb7",
          "primary.50": "#e5f8f6",
          "primary.500": "#00c0a5",
          "primary.600": "#009984",
          "primary.700": "#007363",
          "primary.800": "#004c42",
          "primary.900": "#002621",
          "primary.950": "#001310",
          "secondary.100": "#cedee1",
          "secondary.200": "#9ebdc4",
          "secondary.25": "#f2f6f7",
          "secondary.300": "#6d9ca7",
          "secondary.400": "#3d7a8a",
          "secondary.50": "#e6eef0",
          "secondary.500": "#0d5a6d",
          "secondary.600": "#0a4857",
          "secondary.700": "#073641",
          "secondary.800": "#05242b",
          "secondary.900": "#021215",
          "secondary.950": "#01080a",
          "shade.0": "#ffffff",
          "shade.100": "#e3e3e3",
          "shade.1000": "#000000",
          "shade.200": "#c8c8c8",
          "shade.25": "#f8f8f8",
          "shade.300": "#adadad",
          "shade.400": "#929292",
          "shade.50": "#f1f1f1",
          "shade.500": "#777777",
          "shade.600": "#5f5f5f",
          "shade.700": "#474747",
          "shade.800": "#2f2f2f",
          "shade.900": "#171717",
          "shade.950": "#0b0b0b",
          "success.100": "#dbf2cc",
          "success.200": "#b8e599",
          "success.25": "#f6fbf2",
          "success.300": "#94d966",
          "success.400": "#71cc32",
          "success.50": "#edf8e5",
          "success.500": "#4ec000",
          "success.600": "#3e9900",
          "success.700": "#2e7300",
          "success.800": "#1f4c00",
          "success.900": "#0f2600",
          "success.950": "#071300",
          "tertiary.100": "#ffe2df",
          "tertiary.200": "#ffc5c0",
          "tertiary.25": "#fff7f7",
          "tertiary.300": "#ffa9a1",
          "tertiary.400": "#ff8c82",
          "tertiary.50": "#fff0ef",
          "tertiary.500": "#ff7063",
          "tertiary.600": "#cc594f",
          "tertiary.700": "#99433b",
          "tertiary.800": "#662c27",
          "tertiary.900": "#331613",
          "tertiary.950": "#190b09",
          "warn.100": "#fcddcc",
          "warn.200": "#f9bc99",
          "warn.25": "#fef6f2",
          "warn.300": "#f69a66",
          "warn.400": "#f37932",
          "warn.50": "#fdeee5",
          "warn.500": "#f05800",
          "warn.600": "#c04600",
          "warn.700": "#903400",
          "warn.800": "#602300",
          "warn.900": "#301100",
          "warn.950": "#170800",
        },
        "logo": Object {
          "logoName": "LendiLogo",
        },
        "typography": Object {
          "body": Object {
            "fontFamily": "'Open Sans', sans-serif",
          },
          "heading": Object {
            "fontFamily": "'Cabin', sans-serif",
          },
        },
      }
    }
  >
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bdVaJa",
              "isStatic": false,
              "lastClassName": "c0",
              "rules": Array [
                "
  color: ",
                "#474747",
                ";
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bdVaJa",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="c0"
        >
          <ForwardRef
            onChange={[MockFunction]}
            placeholder="input here ..."
          >
            <styled.div
              isDisabled={false}
              isError={false}
              isFullWidth={false}
              isInverse={false}
              size="md"
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jTzLTM",
                      "isStatic": false,
                      "lastClassName": "c1",
                      "rules": Array [
                        "
  ",
                        "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
                        ";
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  ",
                        [Function],
                        ";

  :hover:not(:focus) {
    ",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-jTzLTM",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                isDisabled={false}
                isError={false}
                isFullWidth={false}
                isInverse={false}
                size="md"
              >
                <div
                  className="c1"
                  size="md"
                >
                  <styled.input
                    disabled={false}
                    fontSize="md"
                    isError={false}
                    isInverse={false}
                    onChange={[MockFunction]}
                    placeholder="input here ..."
                    type="text"
                  >
                    <StyledComponent
                      disabled={false}
                      fontSize="md"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-fjdhpX",
                            "isStatic": false,
                            "lastClassName": "c2",
                            "rules": Array [
                              "
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  ",
                              [Function],
                              "
    ::placeholder {
    color: ",
                              [Function],
                              ";
  }

  :disabled {
    cursor: not-allowed;
    ",
                              [Function],
                              ";
  }
",
                            ],
                          },
                          "displayName": "styled.input",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-fjdhpX",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={
                        Object {
                          "current": .c0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c0::-webkit-input-placeholder {
  color: #adadad;
}

.c0::-moz-placeholder {
  color: #adadad;
}

.c0:-ms-input-placeholder {
  color: #adadad;
}

.c0::placeholder {
  color: #adadad;
}

.c0:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<input
                            class="c0"
                            font-size="md"
                            placeholder="input here ..."
                            type="text"
                            value=""
                          />,
                        }
                      }
                      isError={false}
                      isInverse={false}
                      onChange={[MockFunction]}
                      placeholder="input here ..."
                      type="text"
                    >
                      <input
                        className="c2"
                        disabled={false}
                        fontSize="md"
                        onChange={[MockFunction]}
                        placeholder="input here ..."
                        type="text"
                      />
                    </StyledComponent>
                  </styled.input>
                </div>
              </StyledComponent>
            </styled.div>
          </ForwardRef>
          <GlobalStyleComponent />
        </div>
      </StyledComponent>
    </styled.div>
  </ThemeProvider>
</Theme>
`;

exports[`input variations of the text input in all given sizes lg should render 100% width of with isFullWidth prop 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  box-sizing: border-box;
  border-radius: 6px;
  border: 1px solid #c8c8c8;
  width: 100%;
  background-color: #ffffff;
  height: calc(3 * var(--lendi-ui-size));
  width: 100%;
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: color;
  -moz-var: color;
  -ms-var: color;
  var: color;
  return: color;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  color: = theme_1.select('colors.shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  color: = theme_1.select('colors.shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  color: = theme_1.select('colors.error.500');
}

.c1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c1::-webkit-input-placeholder {
  color: #adadad;
}

.c1::-moz-placeholder {
  color: #adadad;
}

.c1:-ms-input-placeholder {
  color: #adadad;
}

.c1::placeholder {
  color: #adadad;
}

.c1:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<styled.div
  isDisabled={false}
  isError={false}
  isFullWidth={true}
  isInverse={false}
  size="md"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jTzLTM",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  ",
            [Function],
            ";

  :hover:not(:focus) {
    ",
            [Function],
            "
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-jTzLTM",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={false}
    isFullWidth={true}
    isInverse={false}
    size="md"
  >
    <div
      className="c0"
      size="md"
    >
      <styled.input
        disabled={false}
        fontSize="md"
        isError={false}
        isInverse={false}
        onChange={[MockFunction]}
        placeholder="input here ..."
        type="text"
      >
        <StyledComponent
          disabled={false}
          fontSize="md"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  ",
                  [Function],
                  "
    ::placeholder {
    color: ",
                  [Function],
                  ";
  }

  :disabled {
    cursor: not-allowed;
    ",
                  [Function],
                  ";
  }
",
                ],
              },
              "displayName": "styled.input",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": .c0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c0::-webkit-input-placeholder {
  color: #adadad;
}

.c0::-moz-placeholder {
  color: #adadad;
}

.c0:-ms-input-placeholder {
  color: #adadad;
}

.c0::placeholder {
  color: #adadad;
}

.c0:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<input
                class="c0"
                font-size="md"
                placeholder="input here ..."
                type="text"
                value=""
              />,
            }
          }
          isError={false}
          isInverse={false}
          onChange={[MockFunction]}
          placeholder="input here ..."
          type="text"
        >
          <input
            className="c1"
            disabled={false}
            fontSize="md"
            onChange={[MockFunction]}
            placeholder="input here ..."
            type="text"
          />
        </StyledComponent>
      </styled.input>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`input variations of the text input in all given sizes lg should render the component in a disabled state with the isDisabled prop 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  box-sizing: border-box;
  border-radius: 6px;
  cursor: not-allowed;
  width: auto;
  background-color: #f8f8f8;
  border: 1px solid #e3e3e3;
  height: calc(3 * var(--lendi-ui-size));
  width: calc(21.5 * var(--lendi-ui-size));
}

.c1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c1::-webkit-input-placeholder {
  color: #adadad;
}

.c1::-moz-placeholder {
  color: #adadad;
}

.c1:-ms-input-placeholder {
  color: #adadad;
}

.c1::placeholder {
  color: #adadad;
}

.c1:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<styled.div
  isDisabled={true}
  isError={false}
  isFullWidth={false}
  isInverse={false}
  size="md"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jTzLTM",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  ",
            [Function],
            ";

  :hover:not(:focus) {
    ",
            [Function],
            "
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-jTzLTM",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={true}
    isError={false}
    isFullWidth={false}
    isInverse={false}
    size="md"
  >
    <div
      className="c0"
      size="md"
    >
      <styled.input
        disabled={true}
        fontSize="md"
        isError={false}
        isInverse={false}
        onChange={[MockFunction]}
        placeholder="input here ..."
        type="text"
      >
        <StyledComponent
          disabled={true}
          fontSize="md"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  ",
                  [Function],
                  "
    ::placeholder {
    color: ",
                  [Function],
                  ";
  }

  :disabled {
    cursor: not-allowed;
    ",
                  [Function],
                  ";
  }
",
                ],
              },
              "displayName": "styled.input",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": .c0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c0::-webkit-input-placeholder {
  color: #adadad;
}

.c0::-moz-placeholder {
  color: #adadad;
}

.c0:-ms-input-placeholder {
  color: #adadad;
}

.c0::placeholder {
  color: #adadad;
}

.c0:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<input
                class="c0"
                disabled=""
                font-size="md"
                placeholder="input here ..."
                type="text"
                value=""
              />,
            }
          }
          isError={false}
          isInverse={false}
          onChange={[MockFunction]}
          placeholder="input here ..."
          type="text"
        >
          <input
            className="c1"
            disabled={true}
            fontSize="md"
            onChange={[MockFunction]}
            placeholder="input here ..."
            type="text"
          />
        </StyledComponent>
      </styled.input>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`input variations of the text input in all given sizes lg should render the component with a red border if the isError state is true 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  box-sizing: border-box;
  border-radius: 6px;
  border: 1px solid #ff1c4a;
  width: auto;
  background-color: #ffffff;
  height: calc(3 * var(--lendi-ui-size));
  width: calc(21.5 * var(--lendi-ui-size));
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: color;
  -moz-var: color;
  -ms-var: color;
  var: color;
  return: color;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  color: = theme_1.select('colors.shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  color: = theme_1.select('colors.shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  color: = theme_1.select('colors.error.500');
}

.c1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c1::-webkit-input-placeholder {
  color: #adadad;
}

.c1::-moz-placeholder {
  color: #adadad;
}

.c1:-ms-input-placeholder {
  color: #adadad;
}

.c1::placeholder {
  color: #adadad;
}

.c1:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<styled.div
  isDisabled={false}
  isError={true}
  isFullWidth={false}
  isInverse={false}
  size="md"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jTzLTM",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  ",
            [Function],
            ";

  :hover:not(:focus) {
    ",
            [Function],
            "
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-jTzLTM",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={true}
    isFullWidth={false}
    isInverse={false}
    size="md"
  >
    <div
      className="c0"
      size="md"
    >
      <styled.input
        disabled={false}
        fontSize="md"
        isError={true}
        isInverse={false}
        onChange={[MockFunction]}
        placeholder="input here ..."
        type="text"
      >
        <StyledComponent
          disabled={false}
          fontSize="md"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  ",
                  [Function],
                  "
    ::placeholder {
    color: ",
                  [Function],
                  ";
  }

  :disabled {
    cursor: not-allowed;
    ",
                  [Function],
                  ";
  }
",
                ],
              },
              "displayName": "styled.input",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": .c0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c0::-webkit-input-placeholder {
  color: #adadad;
}

.c0::-moz-placeholder {
  color: #adadad;
}

.c0:-ms-input-placeholder {
  color: #adadad;
}

.c0::placeholder {
  color: #adadad;
}

.c0:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<input
                class="c0"
                font-size="md"
                placeholder="input here ..."
                type="text"
                value=""
              />,
            }
          }
          isError={true}
          isInverse={false}
          onChange={[MockFunction]}
          placeholder="input here ..."
          type="text"
        >
          <input
            className="c1"
            disabled={false}
            fontSize="md"
            onChange={[MockFunction]}
            placeholder="input here ..."
            type="text"
          />
        </StyledComponent>
      </styled.input>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`input variations of the text input in all given sizes lg should render the component with a white border and transparent background if the isInverse prop is true 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  box-sizing: border-box;
  border-radius: 6px;
  border: 1px solid #f8f8f8;
  width: auto;
  background-color: transparent;
  height: calc(3 * var(--lendi-ui-size));
  width: calc(21.5 * var(--lendi-ui-size));
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: color;
  -moz-var: color;
  -ms-var: color;
  var: color;
  return: color;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  color: = theme_1.select('colors.shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  color: = theme_1.select('colors.shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  color: = theme_1.select('colors.error.500');
}

.c1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #ffffff;
  background-color: transparent;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c1::-webkit-input-placeholder {
  color: #adadad;
}

.c1::-moz-placeholder {
  color: #adadad;
}

.c1:-ms-input-placeholder {
  color: #adadad;
}

.c1::placeholder {
  color: #adadad;
}

.c1:disabled {
  cursor: not-allowed;
  background-color: transparent;
}

<styled.div
  isDisabled={false}
  isError={false}
  isFullWidth={false}
  isInverse={true}
  size="md"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jTzLTM",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  ",
            [Function],
            ";

  :hover:not(:focus) {
    ",
            [Function],
            "
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-jTzLTM",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={false}
    isFullWidth={false}
    isInverse={true}
    size="md"
  >
    <div
      className="c0"
      size="md"
    >
      <styled.input
        disabled={false}
        fontSize="md"
        isError={false}
        isInverse={true}
        onChange={[MockFunction]}
        placeholder="input here ..."
        type="text"
      >
        <StyledComponent
          disabled={false}
          fontSize="md"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  ",
                  [Function],
                  "
    ::placeholder {
    color: ",
                  [Function],
                  ";
  }

  :disabled {
    cursor: not-allowed;
    ",
                  [Function],
                  ";
  }
",
                ],
              },
              "displayName": "styled.input",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": .c0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #ffffff;
  background-color: transparent;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c0::-webkit-input-placeholder {
  color: #adadad;
}

.c0::-moz-placeholder {
  color: #adadad;
}

.c0:-ms-input-placeholder {
  color: #adadad;
}

.c0::placeholder {
  color: #adadad;
}

.c0:disabled {
  cursor: not-allowed;
  background-color: transparent;
}

<input
                class="c0"
                font-size="md"
                placeholder="input here ..."
                type="text"
                value=""
              />,
            }
          }
          isError={false}
          isInverse={true}
          onChange={[MockFunction]}
          placeholder="input here ..."
          type="text"
        >
          <input
            className="c1"
            disabled={false}
            fontSize="md"
            onChange={[MockFunction]}
            placeholder="input here ..."
            type="text"
          />
        </StyledComponent>
      </styled.input>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`input variations of the text input in all given sizes md should render 100% width of with isFullWidth prop 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  box-sizing: border-box;
  border-radius: 6px;
  border: 1px solid #c8c8c8;
  width: 100%;
  background-color: #ffffff;
  height: calc(3 * var(--lendi-ui-size));
  width: 100%;
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: color;
  -moz-var: color;
  -ms-var: color;
  var: color;
  return: color;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  color: = theme_1.select('colors.shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  color: = theme_1.select('colors.shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  color: = theme_1.select('colors.error.500');
}

.c1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c1::-webkit-input-placeholder {
  color: #adadad;
}

.c1::-moz-placeholder {
  color: #adadad;
}

.c1:-ms-input-placeholder {
  color: #adadad;
}

.c1::placeholder {
  color: #adadad;
}

.c1:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<styled.div
  isDisabled={false}
  isError={false}
  isFullWidth={true}
  isInverse={false}
  size="md"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jTzLTM",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  ",
            [Function],
            ";

  :hover:not(:focus) {
    ",
            [Function],
            "
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-jTzLTM",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={false}
    isFullWidth={true}
    isInverse={false}
    size="md"
  >
    <div
      className="c0"
      size="md"
    >
      <styled.input
        disabled={false}
        fontSize="md"
        isError={false}
        isInverse={false}
        onChange={[MockFunction]}
        placeholder="input here ..."
        type="text"
      >
        <StyledComponent
          disabled={false}
          fontSize="md"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  ",
                  [Function],
                  "
    ::placeholder {
    color: ",
                  [Function],
                  ";
  }

  :disabled {
    cursor: not-allowed;
    ",
                  [Function],
                  ";
  }
",
                ],
              },
              "displayName": "styled.input",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": .c0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c0::-webkit-input-placeholder {
  color: #adadad;
}

.c0::-moz-placeholder {
  color: #adadad;
}

.c0:-ms-input-placeholder {
  color: #adadad;
}

.c0::placeholder {
  color: #adadad;
}

.c0:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<input
                class="c0"
                font-size="md"
                placeholder="input here ..."
                type="text"
                value=""
              />,
            }
          }
          isError={false}
          isInverse={false}
          onChange={[MockFunction]}
          placeholder="input here ..."
          type="text"
        >
          <input
            className="c1"
            disabled={false}
            fontSize="md"
            onChange={[MockFunction]}
            placeholder="input here ..."
            type="text"
          />
        </StyledComponent>
      </styled.input>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`input variations of the text input in all given sizes md should render the component in a disabled state with the isDisabled prop 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  box-sizing: border-box;
  border-radius: 6px;
  cursor: not-allowed;
  width: auto;
  background-color: #f8f8f8;
  border: 1px solid #e3e3e3;
  height: calc(3 * var(--lendi-ui-size));
  width: calc(21.5 * var(--lendi-ui-size));
}

.c1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c1::-webkit-input-placeholder {
  color: #adadad;
}

.c1::-moz-placeholder {
  color: #adadad;
}

.c1:-ms-input-placeholder {
  color: #adadad;
}

.c1::placeholder {
  color: #adadad;
}

.c1:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<styled.div
  isDisabled={true}
  isError={false}
  isFullWidth={false}
  isInverse={false}
  size="md"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jTzLTM",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  ",
            [Function],
            ";

  :hover:not(:focus) {
    ",
            [Function],
            "
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-jTzLTM",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={true}
    isError={false}
    isFullWidth={false}
    isInverse={false}
    size="md"
  >
    <div
      className="c0"
      size="md"
    >
      <styled.input
        disabled={true}
        fontSize="md"
        isError={false}
        isInverse={false}
        onChange={[MockFunction]}
        placeholder="input here ..."
        type="text"
      >
        <StyledComponent
          disabled={true}
          fontSize="md"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  ",
                  [Function],
                  "
    ::placeholder {
    color: ",
                  [Function],
                  ";
  }

  :disabled {
    cursor: not-allowed;
    ",
                  [Function],
                  ";
  }
",
                ],
              },
              "displayName": "styled.input",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": .c0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c0::-webkit-input-placeholder {
  color: #adadad;
}

.c0::-moz-placeholder {
  color: #adadad;
}

.c0:-ms-input-placeholder {
  color: #adadad;
}

.c0::placeholder {
  color: #adadad;
}

.c0:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<input
                class="c0"
                disabled=""
                font-size="md"
                placeholder="input here ..."
                type="text"
                value=""
              />,
            }
          }
          isError={false}
          isInverse={false}
          onChange={[MockFunction]}
          placeholder="input here ..."
          type="text"
        >
          <input
            className="c1"
            disabled={true}
            fontSize="md"
            onChange={[MockFunction]}
            placeholder="input here ..."
            type="text"
          />
        </StyledComponent>
      </styled.input>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`input variations of the text input in all given sizes md should render the component with a red border if the isError state is true 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  box-sizing: border-box;
  border-radius: 6px;
  border: 1px solid #ff1c4a;
  width: auto;
  background-color: #ffffff;
  height: calc(3 * var(--lendi-ui-size));
  width: calc(21.5 * var(--lendi-ui-size));
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: color;
  -moz-var: color;
  -ms-var: color;
  var: color;
  return: color;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  color: = theme_1.select('colors.shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  color: = theme_1.select('colors.shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  color: = theme_1.select('colors.error.500');
}

.c1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c1::-webkit-input-placeholder {
  color: #adadad;
}

.c1::-moz-placeholder {
  color: #adadad;
}

.c1:-ms-input-placeholder {
  color: #adadad;
}

.c1::placeholder {
  color: #adadad;
}

.c1:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<styled.div
  isDisabled={false}
  isError={true}
  isFullWidth={false}
  isInverse={false}
  size="md"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jTzLTM",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  ",
            [Function],
            ";

  :hover:not(:focus) {
    ",
            [Function],
            "
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-jTzLTM",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={true}
    isFullWidth={false}
    isInverse={false}
    size="md"
  >
    <div
      className="c0"
      size="md"
    >
      <styled.input
        disabled={false}
        fontSize="md"
        isError={true}
        isInverse={false}
        onChange={[MockFunction]}
        placeholder="input here ..."
        type="text"
      >
        <StyledComponent
          disabled={false}
          fontSize="md"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  ",
                  [Function],
                  "
    ::placeholder {
    color: ",
                  [Function],
                  ";
  }

  :disabled {
    cursor: not-allowed;
    ",
                  [Function],
                  ";
  }
",
                ],
              },
              "displayName": "styled.input",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": .c0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c0::-webkit-input-placeholder {
  color: #adadad;
}

.c0::-moz-placeholder {
  color: #adadad;
}

.c0:-ms-input-placeholder {
  color: #adadad;
}

.c0::placeholder {
  color: #adadad;
}

.c0:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<input
                class="c0"
                font-size="md"
                placeholder="input here ..."
                type="text"
                value=""
              />,
            }
          }
          isError={true}
          isInverse={false}
          onChange={[MockFunction]}
          placeholder="input here ..."
          type="text"
        >
          <input
            className="c1"
            disabled={false}
            fontSize="md"
            onChange={[MockFunction]}
            placeholder="input here ..."
            type="text"
          />
        </StyledComponent>
      </styled.input>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`input variations of the text input in all given sizes md should render the component with a white border and transparent background if the isInverse prop is true 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  box-sizing: border-box;
  border-radius: 6px;
  border: 1px solid #f8f8f8;
  width: auto;
  background-color: transparent;
  height: calc(3 * var(--lendi-ui-size));
  width: calc(21.5 * var(--lendi-ui-size));
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: color;
  -moz-var: color;
  -ms-var: color;
  var: color;
  return: color;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  color: = theme_1.select('colors.shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  color: = theme_1.select('colors.shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  color: = theme_1.select('colors.error.500');
}

.c1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #ffffff;
  background-color: transparent;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c1::-webkit-input-placeholder {
  color: #adadad;
}

.c1::-moz-placeholder {
  color: #adadad;
}

.c1:-ms-input-placeholder {
  color: #adadad;
}

.c1::placeholder {
  color: #adadad;
}

.c1:disabled {
  cursor: not-allowed;
  background-color: transparent;
}

<styled.div
  isDisabled={false}
  isError={false}
  isFullWidth={false}
  isInverse={true}
  size="md"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jTzLTM",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  ",
            [Function],
            ";

  :hover:not(:focus) {
    ",
            [Function],
            "
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-jTzLTM",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={false}
    isFullWidth={false}
    isInverse={true}
    size="md"
  >
    <div
      className="c0"
      size="md"
    >
      <styled.input
        disabled={false}
        fontSize="md"
        isError={false}
        isInverse={true}
        onChange={[MockFunction]}
        placeholder="input here ..."
        type="text"
      >
        <StyledComponent
          disabled={false}
          fontSize="md"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  ",
                  [Function],
                  "
    ::placeholder {
    color: ",
                  [Function],
                  ";
  }

  :disabled {
    cursor: not-allowed;
    ",
                  [Function],
                  ";
  }
",
                ],
              },
              "displayName": "styled.input",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": .c0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #ffffff;
  background-color: transparent;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c0::-webkit-input-placeholder {
  color: #adadad;
}

.c0::-moz-placeholder {
  color: #adadad;
}

.c0:-ms-input-placeholder {
  color: #adadad;
}

.c0::placeholder {
  color: #adadad;
}

.c0:disabled {
  cursor: not-allowed;
  background-color: transparent;
}

<input
                class="c0"
                font-size="md"
                placeholder="input here ..."
                type="text"
                value=""
              />,
            }
          }
          isError={false}
          isInverse={true}
          onChange={[MockFunction]}
          placeholder="input here ..."
          type="text"
        >
          <input
            className="c1"
            disabled={false}
            fontSize="md"
            onChange={[MockFunction]}
            placeholder="input here ..."
            type="text"
          />
        </StyledComponent>
      </styled.input>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`input variations of the text input in all given sizes sm should render 100% width of with isFullWidth prop 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  box-sizing: border-box;
  border-radius: 6px;
  border: 1px solid #c8c8c8;
  width: 100%;
  background-color: #ffffff;
  height: calc(3 * var(--lendi-ui-size));
  width: 100%;
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: color;
  -moz-var: color;
  -ms-var: color;
  var: color;
  return: color;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  color: = theme_1.select('colors.shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  color: = theme_1.select('colors.shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  color: = theme_1.select('colors.error.500');
}

.c1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c1::-webkit-input-placeholder {
  color: #adadad;
}

.c1::-moz-placeholder {
  color: #adadad;
}

.c1:-ms-input-placeholder {
  color: #adadad;
}

.c1::placeholder {
  color: #adadad;
}

.c1:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<styled.div
  isDisabled={false}
  isError={false}
  isFullWidth={true}
  isInverse={false}
  size="md"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jTzLTM",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  ",
            [Function],
            ";

  :hover:not(:focus) {
    ",
            [Function],
            "
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-jTzLTM",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={false}
    isFullWidth={true}
    isInverse={false}
    size="md"
  >
    <div
      className="c0"
      size="md"
    >
      <styled.input
        disabled={false}
        fontSize="md"
        isError={false}
        isInverse={false}
        onChange={[MockFunction]}
        placeholder="input here ..."
        type="text"
      >
        <StyledComponent
          disabled={false}
          fontSize="md"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  ",
                  [Function],
                  "
    ::placeholder {
    color: ",
                  [Function],
                  ";
  }

  :disabled {
    cursor: not-allowed;
    ",
                  [Function],
                  ";
  }
",
                ],
              },
              "displayName": "styled.input",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": .c0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c0::-webkit-input-placeholder {
  color: #adadad;
}

.c0::-moz-placeholder {
  color: #adadad;
}

.c0:-ms-input-placeholder {
  color: #adadad;
}

.c0::placeholder {
  color: #adadad;
}

.c0:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<input
                class="c0"
                font-size="md"
                placeholder="input here ..."
                type="text"
                value=""
              />,
            }
          }
          isError={false}
          isInverse={false}
          onChange={[MockFunction]}
          placeholder="input here ..."
          type="text"
        >
          <input
            className="c1"
            disabled={false}
            fontSize="md"
            onChange={[MockFunction]}
            placeholder="input here ..."
            type="text"
          />
        </StyledComponent>
      </styled.input>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`input variations of the text input in all given sizes sm should render the component in a disabled state with the isDisabled prop 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  box-sizing: border-box;
  border-radius: 6px;
  cursor: not-allowed;
  width: auto;
  background-color: #f8f8f8;
  border: 1px solid #e3e3e3;
  height: calc(3 * var(--lendi-ui-size));
  width: calc(21.5 * var(--lendi-ui-size));
}

.c1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c1::-webkit-input-placeholder {
  color: #adadad;
}

.c1::-moz-placeholder {
  color: #adadad;
}

.c1:-ms-input-placeholder {
  color: #adadad;
}

.c1::placeholder {
  color: #adadad;
}

.c1:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<styled.div
  isDisabled={true}
  isError={false}
  isFullWidth={false}
  isInverse={false}
  size="md"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jTzLTM",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  ",
            [Function],
            ";

  :hover:not(:focus) {
    ",
            [Function],
            "
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-jTzLTM",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={true}
    isError={false}
    isFullWidth={false}
    isInverse={false}
    size="md"
  >
    <div
      className="c0"
      size="md"
    >
      <styled.input
        disabled={true}
        fontSize="md"
        isError={false}
        isInverse={false}
        onChange={[MockFunction]}
        placeholder="input here ..."
        type="text"
      >
        <StyledComponent
          disabled={true}
          fontSize="md"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  ",
                  [Function],
                  "
    ::placeholder {
    color: ",
                  [Function],
                  ";
  }

  :disabled {
    cursor: not-allowed;
    ",
                  [Function],
                  ";
  }
",
                ],
              },
              "displayName": "styled.input",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": .c0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c0::-webkit-input-placeholder {
  color: #adadad;
}

.c0::-moz-placeholder {
  color: #adadad;
}

.c0:-ms-input-placeholder {
  color: #adadad;
}

.c0::placeholder {
  color: #adadad;
}

.c0:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<input
                class="c0"
                disabled=""
                font-size="md"
                placeholder="input here ..."
                type="text"
                value=""
              />,
            }
          }
          isError={false}
          isInverse={false}
          onChange={[MockFunction]}
          placeholder="input here ..."
          type="text"
        >
          <input
            className="c1"
            disabled={true}
            fontSize="md"
            onChange={[MockFunction]}
            placeholder="input here ..."
            type="text"
          />
        </StyledComponent>
      </styled.input>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`input variations of the text input in all given sizes sm should render the component with a red border if the isError state is true 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  box-sizing: border-box;
  border-radius: 6px;
  border: 1px solid #ff1c4a;
  width: auto;
  background-color: #ffffff;
  height: calc(3 * var(--lendi-ui-size));
  width: calc(21.5 * var(--lendi-ui-size));
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: color;
  -moz-var: color;
  -ms-var: color;
  var: color;
  return: color;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  color: = theme_1.select('colors.shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  color: = theme_1.select('colors.shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  color: = theme_1.select('colors.error.500');
}

.c1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c1::-webkit-input-placeholder {
  color: #adadad;
}

.c1::-moz-placeholder {
  color: #adadad;
}

.c1:-ms-input-placeholder {
  color: #adadad;
}

.c1::placeholder {
  color: #adadad;
}

.c1:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<styled.div
  isDisabled={false}
  isError={true}
  isFullWidth={false}
  isInverse={false}
  size="md"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jTzLTM",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  ",
            [Function],
            ";

  :hover:not(:focus) {
    ",
            [Function],
            "
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-jTzLTM",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={true}
    isFullWidth={false}
    isInverse={false}
    size="md"
  >
    <div
      className="c0"
      size="md"
    >
      <styled.input
        disabled={false}
        fontSize="md"
        isError={true}
        isInverse={false}
        onChange={[MockFunction]}
        placeholder="input here ..."
        type="text"
      >
        <StyledComponent
          disabled={false}
          fontSize="md"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  ",
                  [Function],
                  "
    ::placeholder {
    color: ",
                  [Function],
                  ";
  }

  :disabled {
    cursor: not-allowed;
    ",
                  [Function],
                  ";
  }
",
                ],
              },
              "displayName": "styled.input",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": .c0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c0::-webkit-input-placeholder {
  color: #adadad;
}

.c0::-moz-placeholder {
  color: #adadad;
}

.c0:-ms-input-placeholder {
  color: #adadad;
}

.c0::placeholder {
  color: #adadad;
}

.c0:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<input
                class="c0"
                font-size="md"
                placeholder="input here ..."
                type="text"
                value=""
              />,
            }
          }
          isError={true}
          isInverse={false}
          onChange={[MockFunction]}
          placeholder="input here ..."
          type="text"
        >
          <input
            className="c1"
            disabled={false}
            fontSize="md"
            onChange={[MockFunction]}
            placeholder="input here ..."
            type="text"
          />
        </StyledComponent>
      </styled.input>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`input variations of the text input in all given sizes sm should render the component with a white border and transparent background if the isInverse prop is true 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  box-sizing: border-box;
  border-radius: 6px;
  border: 1px solid #f8f8f8;
  width: auto;
  background-color: transparent;
  height: calc(3 * var(--lendi-ui-size));
  width: calc(21.5 * var(--lendi-ui-size));
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: color;
  -moz-var: color;
  -ms-var: color;
  var: color;
  return: color;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  color: = theme_1.select('colors.shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  color: = theme_1.select('colors.shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  color: = theme_1.select('colors.error.500');
}

.c1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #ffffff;
  background-color: transparent;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c1::-webkit-input-placeholder {
  color: #adadad;
}

.c1::-moz-placeholder {
  color: #adadad;
}

.c1:-ms-input-placeholder {
  color: #adadad;
}

.c1::placeholder {
  color: #adadad;
}

.c1:disabled {
  cursor: not-allowed;
  background-color: transparent;
}

<styled.div
  isDisabled={false}
  isError={false}
  isFullWidth={false}
  isInverse={true}
  size="md"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jTzLTM",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  ",
            [Function],
            ";

  :hover:not(:focus) {
    ",
            [Function],
            "
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-jTzLTM",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={false}
    isFullWidth={false}
    isInverse={true}
    size="md"
  >
    <div
      className="c0"
      size="md"
    >
      <styled.input
        disabled={false}
        fontSize="md"
        isError={false}
        isInverse={true}
        onChange={[MockFunction]}
        placeholder="input here ..."
        type="text"
      >
        <StyledComponent
          disabled={false}
          fontSize="md"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  ",
                  [Function],
                  "
    ::placeholder {
    color: ",
                  [Function],
                  ";
  }

  :disabled {
    cursor: not-allowed;
    ",
                  [Function],
                  ";
  }
",
                ],
              },
              "displayName": "styled.input",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": .c0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #ffffff;
  background-color: transparent;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c0::-webkit-input-placeholder {
  color: #adadad;
}

.c0::-moz-placeholder {
  color: #adadad;
}

.c0:-ms-input-placeholder {
  color: #adadad;
}

.c0::placeholder {
  color: #adadad;
}

.c0:disabled {
  cursor: not-allowed;
  background-color: transparent;
}

<input
                class="c0"
                font-size="md"
                placeholder="input here ..."
                type="text"
                value=""
              />,
            }
          }
          isError={false}
          isInverse={true}
          onChange={[MockFunction]}
          placeholder="input here ..."
          type="text"
        >
          <input
            className="c1"
            disabled={false}
            fontSize="md"
            onChange={[MockFunction]}
            placeholder="input here ..."
            type="text"
          />
        </StyledComponent>
      </styled.input>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`input variations of the text input in all given sizes xs should render 100% width of with isFullWidth prop 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  box-sizing: border-box;
  border-radius: 6px;
  border: 1px solid #c8c8c8;
  width: 100%;
  background-color: #ffffff;
  height: calc(3 * var(--lendi-ui-size));
  width: 100%;
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: color;
  -moz-var: color;
  -ms-var: color;
  var: color;
  return: color;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  color: = theme_1.select('colors.shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  color: = theme_1.select('colors.shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  color: = theme_1.select('colors.error.500');
}

.c1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c1::-webkit-input-placeholder {
  color: #adadad;
}

.c1::-moz-placeholder {
  color: #adadad;
}

.c1:-ms-input-placeholder {
  color: #adadad;
}

.c1::placeholder {
  color: #adadad;
}

.c1:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<styled.div
  isDisabled={false}
  isError={false}
  isFullWidth={true}
  isInverse={false}
  size="md"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jTzLTM",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  ",
            [Function],
            ";

  :hover:not(:focus) {
    ",
            [Function],
            "
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-jTzLTM",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={false}
    isFullWidth={true}
    isInverse={false}
    size="md"
  >
    <div
      className="c0"
      size="md"
    >
      <styled.input
        disabled={false}
        fontSize="md"
        isError={false}
        isInverse={false}
        onChange={[MockFunction]}
        placeholder="input here ..."
        type="text"
      >
        <StyledComponent
          disabled={false}
          fontSize="md"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  ",
                  [Function],
                  "
    ::placeholder {
    color: ",
                  [Function],
                  ";
  }

  :disabled {
    cursor: not-allowed;
    ",
                  [Function],
                  ";
  }
",
                ],
              },
              "displayName": "styled.input",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": .c0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c0::-webkit-input-placeholder {
  color: #adadad;
}

.c0::-moz-placeholder {
  color: #adadad;
}

.c0:-ms-input-placeholder {
  color: #adadad;
}

.c0::placeholder {
  color: #adadad;
}

.c0:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<input
                class="c0"
                font-size="md"
                placeholder="input here ..."
                type="text"
                value=""
              />,
            }
          }
          isError={false}
          isInverse={false}
          onChange={[MockFunction]}
          placeholder="input here ..."
          type="text"
        >
          <input
            className="c1"
            disabled={false}
            fontSize="md"
            onChange={[MockFunction]}
            placeholder="input here ..."
            type="text"
          />
        </StyledComponent>
      </styled.input>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`input variations of the text input in all given sizes xs should render the component in a disabled state with the isDisabled prop 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  box-sizing: border-box;
  border-radius: 6px;
  cursor: not-allowed;
  width: auto;
  background-color: #f8f8f8;
  border: 1px solid #e3e3e3;
  height: calc(3 * var(--lendi-ui-size));
  width: calc(21.5 * var(--lendi-ui-size));
}

.c1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c1::-webkit-input-placeholder {
  color: #adadad;
}

.c1::-moz-placeholder {
  color: #adadad;
}

.c1:-ms-input-placeholder {
  color: #adadad;
}

.c1::placeholder {
  color: #adadad;
}

.c1:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<styled.div
  isDisabled={true}
  isError={false}
  isFullWidth={false}
  isInverse={false}
  size="md"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jTzLTM",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  ",
            [Function],
            ";

  :hover:not(:focus) {
    ",
            [Function],
            "
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-jTzLTM",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={true}
    isError={false}
    isFullWidth={false}
    isInverse={false}
    size="md"
  >
    <div
      className="c0"
      size="md"
    >
      <styled.input
        disabled={true}
        fontSize="md"
        isError={false}
        isInverse={false}
        onChange={[MockFunction]}
        placeholder="input here ..."
        type="text"
      >
        <StyledComponent
          disabled={true}
          fontSize="md"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  ",
                  [Function],
                  "
    ::placeholder {
    color: ",
                  [Function],
                  ";
  }

  :disabled {
    cursor: not-allowed;
    ",
                  [Function],
                  ";
  }
",
                ],
              },
              "displayName": "styled.input",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": .c0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c0::-webkit-input-placeholder {
  color: #adadad;
}

.c0::-moz-placeholder {
  color: #adadad;
}

.c0:-ms-input-placeholder {
  color: #adadad;
}

.c0::placeholder {
  color: #adadad;
}

.c0:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<input
                class="c0"
                disabled=""
                font-size="md"
                placeholder="input here ..."
                type="text"
                value=""
              />,
            }
          }
          isError={false}
          isInverse={false}
          onChange={[MockFunction]}
          placeholder="input here ..."
          type="text"
        >
          <input
            className="c1"
            disabled={true}
            fontSize="md"
            onChange={[MockFunction]}
            placeholder="input here ..."
            type="text"
          />
        </StyledComponent>
      </styled.input>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`input variations of the text input in all given sizes xs should render the component with a red border if the isError state is true 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  box-sizing: border-box;
  border-radius: 6px;
  border: 1px solid #ff1c4a;
  width: auto;
  background-color: #ffffff;
  height: calc(3 * var(--lendi-ui-size));
  width: calc(21.5 * var(--lendi-ui-size));
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: color;
  -moz-var: color;
  -ms-var: color;
  var: color;
  return: color;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  color: = theme_1.select('colors.shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  color: = theme_1.select('colors.shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  color: = theme_1.select('colors.error.500');
}

.c1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c1::-webkit-input-placeholder {
  color: #adadad;
}

.c1::-moz-placeholder {
  color: #adadad;
}

.c1:-ms-input-placeholder {
  color: #adadad;
}

.c1::placeholder {
  color: #adadad;
}

.c1:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<styled.div
  isDisabled={false}
  isError={true}
  isFullWidth={false}
  isInverse={false}
  size="md"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jTzLTM",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  ",
            [Function],
            ";

  :hover:not(:focus) {
    ",
            [Function],
            "
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-jTzLTM",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={true}
    isFullWidth={false}
    isInverse={false}
    size="md"
  >
    <div
      className="c0"
      size="md"
    >
      <styled.input
        disabled={false}
        fontSize="md"
        isError={true}
        isInverse={false}
        onChange={[MockFunction]}
        placeholder="input here ..."
        type="text"
      >
        <StyledComponent
          disabled={false}
          fontSize="md"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  ",
                  [Function],
                  "
    ::placeholder {
    color: ",
                  [Function],
                  ";
  }

  :disabled {
    cursor: not-allowed;
    ",
                  [Function],
                  ";
  }
",
                ],
              },
              "displayName": "styled.input",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": .c0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #474747;
  background-color: #ffffff;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c0::-webkit-input-placeholder {
  color: #adadad;
}

.c0::-moz-placeholder {
  color: #adadad;
}

.c0:-ms-input-placeholder {
  color: #adadad;
}

.c0::placeholder {
  color: #adadad;
}

.c0:disabled {
  cursor: not-allowed;
  background-color: #f8f8f8;
}

<input
                class="c0"
                font-size="md"
                placeholder="input here ..."
                type="text"
                value=""
              />,
            }
          }
          isError={true}
          isInverse={false}
          onChange={[MockFunction]}
          placeholder="input here ..."
          type="text"
        >
          <input
            className="c1"
            disabled={false}
            fontSize="md"
            onChange={[MockFunction]}
            placeholder="input here ..."
            type="text"
          />
        </StyledComponent>
      </styled.input>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`input variations of the text input in all given sizes xs should render the component with a white border and transparent background if the isInverse prop is true 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  box-sizing: border-box;
  border-radius: 6px;
  border: 1px solid #f8f8f8;
  width: auto;
  background-color: transparent;
  height: calc(3 * var(--lendi-ui-size));
  width: calc(21.5 * var(--lendi-ui-size));
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: color;
  -moz-var: color;
  -ms-var: color;
  var: color;
  return: color;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  color: = theme_1.select('colors.shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  color: = theme_1.select('colors.shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  color: = theme_1.select('colors.error.500');
}

.c1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #ffffff;
  background-color: transparent;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c1::-webkit-input-placeholder {
  color: #adadad;
}

.c1::-moz-placeholder {
  color: #adadad;
}

.c1:-ms-input-placeholder {
  color: #adadad;
}

.c1::placeholder {
  color: #adadad;
}

.c1:disabled {
  cursor: not-allowed;
  background-color: transparent;
}

<styled.div
  isDisabled={false}
  isError={false}
  isFullWidth={false}
  isInverse={true}
  size="md"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jTzLTM",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  ",
            [Function],
            ";

  :hover:not(:focus) {
    ",
            [Function],
            "
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-jTzLTM",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={false}
    isFullWidth={false}
    isInverse={true}
    size="md"
  >
    <div
      className="c0"
      size="md"
    >
      <styled.input
        disabled={false}
        fontSize="md"
        isError={false}
        isInverse={true}
        onChange={[MockFunction]}
        placeholder="input here ..."
        type="text"
      >
        <StyledComponent
          disabled={false}
          fontSize="md"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-fjdhpX",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  ",
                  [Function],
                  "
    ::placeholder {
    color: ",
                  [Function],
                  ";
  }

  :disabled {
    cursor: not-allowed;
    ",
                  [Function],
                  ";
  }
",
                ],
              },
              "displayName": "styled.input",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-fjdhpX",
              "target": "input",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": .c0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 100%;
  min-width: 0;
  width: 100%;
  border: 0px;
  font-size: var(--lendi-ui-size);
  border-radius: 6px;
  color: #ffffff;
  background-color: transparent;
  font-family: 'Open Sans',sans-serif;
  padding: 0 var(--lendi-ui-size);
}

.c0::-webkit-input-placeholder {
  color: #adadad;
}

.c0::-moz-placeholder {
  color: #adadad;
}

.c0:-ms-input-placeholder {
  color: #adadad;
}

.c0::placeholder {
  color: #adadad;
}

.c0:disabled {
  cursor: not-allowed;
  background-color: transparent;
}

<input
                class="c0"
                font-size="md"
                placeholder="input here ..."
                type="text"
                value=""
              />,
            }
          }
          isError={false}
          isInverse={true}
          onChange={[MockFunction]}
          placeholder="input here ..."
          type="text"
        >
          <input
            className="c1"
            disabled={false}
            fontSize="md"
            onChange={[MockFunction]}
            placeholder="input here ..."
            type="text"
          />
        </StyledComponent>
      </styled.input>
    </div>
  </StyledComponent>
</styled.div>
`;
