// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InputButton should render InputButton in after wrapper 1`] = `
.c2 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
}

.c2:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c2:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c2:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c2:focus {
  background-color: rgba(50,204,183,1);
}

.c2:hover {
  background-color: rgba(50,204,183,1);
}

.c2:active {
  background-color: rgba(0,153,132,1);
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c4 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c5 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c1:focus {
  outline: 5px auto -webkit-focus-ring-color;
  opacity: 1;
  box-shadow: none;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c1:active {
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c6 .c0 {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
  margin: 0 0 0 -1px;
}

.c7 .c0 {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  margin: 0 -1px 0 0;
}

<Styled(InputWithButton)
  size="md"
  variant="primary"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "c0",
          "isStatic": false,
          "lastClassName": "c1",
          "rules": Array [
            "
  :focus {
    outline: 5px auto -webkit-focus-ring-color;
    opacity: 1;
    box-shadow: none;
    transform: scale(1);
  }
  :active {
    transform: scale(1);
  }
",
          ],
        },
        "displayName": "Styled(InputWithButton)",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "c0",
        "target": [Function],
        "toString": [Function],
        "usesTheme": false,
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      }
    }
    forwardedRef={null}
    size="md"
    variant="primary"
  >
    <InputWithButton
      className="c0 c1"
      size="md"
      variant="primary"
    >
      <Styled(Button)
        className="c0 c1"
        size="md"
        variant="primary"
      >
        <StyledComponent
          className="c0 c1"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-chPdSV",
                "isStatic": false,
                "lastClassName": "fctdxF",
                "rules": Array [
                  "
    ",
                  [Function],
                  ";
  ",
                ],
              },
              "displayName": "Styled(Button)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-chPdSV",
              "target": [Function],
              "toString": [Function],
              "usesTheme": false,
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            }
          }
          forwardedRef={null}
          size="md"
          variant="primary"
        >
          <Button
            className="c0 c1"
            size="md"
            variant="primary"
          >
            <styled.button
              aria-label="search"
              className="c0 c1"
              size="md"
              variant="primary"
            >
              <StyledComponent
                aria-label="search"
                className="c0 c1"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bwzfXH",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        "
  ",
                        [Function],
                        ";
",
                      ],
                    },
                    "displayName": "styled.button",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bwzfXH",
                    "target": "button",
                    "toString": [Function],
                    "usesTheme": false,
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                size="md"
                variant="primary"
              >
                <button
                  aria-label="search"
                  className="c2 c0 c1"
                  size="md"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-ifAKCX",
                            "isStatic": false,
                            "lastClassName": "c3",
                            "rules": Array [
                              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-ifAKCX",
                          "target": "div",
                          "toString": [Function],
                          "usesTheme": false,
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="c3"
                      >
                        <styled.span
                          size="md"
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-EHOje",
                                  "isStatic": false,
                                  "lastClassName": "c4",
                                  "rules": Array [
                                    "
  ",
                                    [Function],
                                    ";
  display: flex;
",
                                  ],
                                },
                                "displayName": "styled.span",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-EHOje",
                                "target": "span",
                                "toString": [Function],
                                "usesTheme": false,
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            size="md"
                          >
                            <span
                              className="c4"
                              size="md"
                            />
                          </StyledComponent>
                        </styled.span>
                        <span>
                          search
                        </span>
                        <styled.span
                          size="md"
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": false,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  ",
                                    [Function],
                                    ";
  display: flex;
",
                                  ],
                                },
                                "displayName": "styled.span",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "span",
                                "toString": [Function],
                                "usesTheme": false,
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            size="md"
                          >
                            <span
                              className="c5"
                              size="md"
                            />
                          </StyledComponent>
                        </styled.span>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </button>
              </StyledComponent>
            </styled.button>
          </Button>
        </StyledComponent>
      </Styled(Button)>
    </InputWithButton>
  </StyledComponent>
</Styled(InputWithButton)>
`;

exports[`InputButton should render InputButton in before wrapper 1`] = `
.c2 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
}

.c2:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c2:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c2:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c2:focus {
  background-color: rgba(50,204,183,1);
}

.c2:hover {
  background-color: rgba(50,204,183,1);
}

.c2:active {
  background-color: rgba(0,153,132,1);
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c4 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c5 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c1:focus {
  outline: 5px auto -webkit-focus-ring-color;
  opacity: 1;
  box-shadow: none;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c1:active {
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c6 .c0 {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
  margin: 0 0 0 -1px;
}

<Styled(InputWithButton)
  size="md"
  variant="primary"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "c0",
          "isStatic": false,
          "lastClassName": "c1",
          "rules": Array [
            "
  :focus {
    outline: 5px auto -webkit-focus-ring-color;
    opacity: 1;
    box-shadow: none;
    transform: scale(1);
  }
  :active {
    transform: scale(1);
  }
",
          ],
        },
        "displayName": "Styled(InputWithButton)",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "c0",
        "target": [Function],
        "toString": [Function],
        "usesTheme": false,
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      }
    }
    forwardedRef={null}
    size="md"
    variant="primary"
  >
    <InputWithButton
      className="c0 c1"
      size="md"
      variant="primary"
    >
      <Styled(Button)
        className="c0 c1"
        size="md"
        variant="primary"
      >
        <StyledComponent
          className="c0 c1"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-kAzzGY",
                "isStatic": false,
                "lastClassName": "cXbMyc",
                "rules": Array [
                  "
    ",
                  [Function],
                  ";
  ",
                ],
              },
              "displayName": "Styled(Button)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-kAzzGY",
              "target": [Function],
              "toString": [Function],
              "usesTheme": false,
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            }
          }
          forwardedRef={null}
          size="md"
          variant="primary"
        >
          <Button
            className="c0 c1"
            size="md"
            variant="primary"
          >
            <styled.button
              aria-label="search"
              className="c0 c1"
              size="md"
              variant="primary"
            >
              <StyledComponent
                aria-label="search"
                className="c0 c1"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bwzfXH",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        "
  ",
                        [Function],
                        ";
",
                      ],
                    },
                    "displayName": "styled.button",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bwzfXH",
                    "target": "button",
                    "toString": [Function],
                    "usesTheme": false,
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                size="md"
                variant="primary"
              >
                <button
                  aria-label="search"
                  className="c2 c0 c1"
                  size="md"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-ifAKCX",
                            "isStatic": false,
                            "lastClassName": "c3",
                            "rules": Array [
                              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-ifAKCX",
                          "target": "div",
                          "toString": [Function],
                          "usesTheme": false,
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="c3"
                      >
                        <styled.span
                          size="md"
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-EHOje",
                                  "isStatic": false,
                                  "lastClassName": "c4",
                                  "rules": Array [
                                    "
  ",
                                    [Function],
                                    ";
  display: flex;
",
                                  ],
                                },
                                "displayName": "styled.span",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-EHOje",
                                "target": "span",
                                "toString": [Function],
                                "usesTheme": false,
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            size="md"
                          >
                            <span
                              className="c4"
                              size="md"
                            />
                          </StyledComponent>
                        </styled.span>
                        <span>
                          search
                        </span>
                        <styled.span
                          size="md"
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": false,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  ",
                                    [Function],
                                    ";
  display: flex;
",
                                  ],
                                },
                                "displayName": "styled.span",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "span",
                                "toString": [Function],
                                "usesTheme": false,
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            size="md"
                          >
                            <span
                              className="c5"
                              size="md"
                            />
                          </StyledComponent>
                        </styled.span>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </button>
              </StyledComponent>
            </styled.button>
          </Button>
        </StyledComponent>
      </Styled(Button)>
    </InputWithButton>
  </StyledComponent>
</Styled(InputWithButton)>
`;
