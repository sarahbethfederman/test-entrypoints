// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Checkbox should render box style when it is setup isBoxed 1`] = `
.c2 {
  font-size: var(--lendi-ui-size);
  line-height: calc(24 / 16);
  font-family: 'Open Sans',sans-serif;
  display: inline-block;
}

.c0 {
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border-radius: 6px;
  height: calc(2.875 * var(--lendi-ui-size));
  border: 1px solid rgba(200,200,200,1);
  cursor: pointer;
}

.c0:hover {
  border: 1px solid rgba(146,146,146,1);
}

.c1 {
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  cursor: pointer;
  position: relative;
  display: inline-block;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  border-radius: 3px;
  box-sizing: border-box;
  margin-left: calc(0.5 * var(--lendi-ui-size));
  margin-right: calc(0.5 * var(--lendi-ui-size));
  border: 2px solid rgba(200,200,200,1);
  background-color: rgba(255,255,255,1);
  height: calc(2 * var(--lendi-ui-size));
  width: calc(2 * var(--lendi-ui-size));
}

.c1:hover {
  border: 2px solid rgba(0,192,165,1);
}

.c1:disabled {
  cursor: not-allowed;
  pointer-events: none;
}

.c1:checked::after {
  content: '';
  left: 0;
  right: 0;
  margin: auto;
  position: absolute;
  border: solid rgba(255,255,255,1);
  border-width: 0 2px 2px 0;
  -webkit-transform: rotate(45deg);
  -ms-transform: rotate(45deg);
  transform: rotate(45deg);
  width: calc(0.4 * var(--lendi-ui-size));
  height: calc(1.2 * var(--lendi-ui-size));
  top: 2px;
}

<Component
  isBoxed={true}
  label="LUI single Checkbox"
  onChange={[Function]}
  value="1"
>
  <styled.label
    checked={false}
    disabled={false}
    isBoxed={true}
    size="md"
  >
    <StyledComponent
      checked={false}
      disabled={false}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htoDjs",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  width: 100%;
  display: flex;
  align-items: center;
  ",
              [Function],
              "
  ",
              [Function],
              "
  ",
              [Function],
              " ",
              [Function],
              ";
  :hover {
    ",
              [Function],
              ";
  }
",
            ],
          },
          "displayName": "styled.label",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htoDjs",
          "target": "label",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isBoxed={true}
      size="md"
    >
      <label
        checked={false}
        className="c0"
        disabled={false}
        size="md"
      >
        <styled.input
          checked={false}
          disabled={false}
          inputSize="md"
          onChange={[Function]}
          type="checkbox"
          value="1"
        >
          <StyledComponent
            checked={false}
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dnqmqq",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  flex-shrink: 0;
  cursor: pointer;
  position: relative;
  display: inline-block;
  appearance: none;
  border-radius: 3px;
  box-sizing: border-box;
  ",
                    "
    margin-left: ",
                    "calc(0.5 * var(--lendi-ui-size))",
                    ";
    margin-right: ",
                    "calc(0.5 * var(--lendi-ui-size))",
                    ";
  ",
                    "
  ",
                    [Function],
                    "}
  ",
                    [Function],
                    "
  :hover {
    ",
                    [Function],
                    ";
  }
  :focus {
    ",
                    [Function],
                    "
  }
  :disabled {
    cursor: not-allowed;
    pointer-events: none;
  }
  :checked::after {
    content: '';
    left: 0;
    right: 0;
    margin: auto;
    position: absolute;
    border: solid ",
                    [Function],
                    ";
    border-width: 0 2px 2px 0;
    transform: rotate(45deg);
    ",
                    [Function],
                    "
",
                  ],
                },
                "displayName": "styled.input",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dnqmqq",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            inputSize="md"
            onChange={[Function]}
            type="checkbox"
            value="1"
          >
            <input
              checked={false}
              className="c1"
              disabled={false}
              onChange={[Function]}
              type="checkbox"
              value="1"
            />
          </StyledComponent>
        </styled.input>
        <styled.p
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    "
  display: inline-block;
",
                  ],
                },
                "displayName": "styled.p",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "p",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <p
              className="c2"
              size="md"
            >
              LUI single Checkbox
            </p>
          </StyledComponent>
        </styled.p>
      </label>
    </StyledComponent>
  </styled.label>
</Component>
`;

exports[`Checkbox should render whole component 1`] = `
.c2 {
  font-size: var(--lendi-ui-size);
  line-height: calc(24 / 16);
  font-family: 'Open Sans',sans-serif;
  display: inline-block;
}

.c0 {
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border-radius: 6px;
  height: calc(2.875 * var(--lendi-ui-size));
  cursor: pointer;
}

.c1 {
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  cursor: pointer;
  position: relative;
  display: inline-block;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  border-radius: 3px;
  box-sizing: border-box;
  margin-left: calc(0.5 * var(--lendi-ui-size));
  margin-right: calc(0.5 * var(--lendi-ui-size));
  border: 2px solid rgba(200,200,200,1);
  background-color: rgba(255,255,255,1);
  height: calc(2 * var(--lendi-ui-size));
  width: calc(2 * var(--lendi-ui-size));
}

.c1:hover {
  border: 2px solid rgba(0,192,165,1);
}

.c1:disabled {
  cursor: not-allowed;
  pointer-events: none;
}

.c1:checked::after {
  content: '';
  left: 0;
  right: 0;
  margin: auto;
  position: absolute;
  border: solid rgba(255,255,255,1);
  border-width: 0 2px 2px 0;
  -webkit-transform: rotate(45deg);
  -ms-transform: rotate(45deg);
  transform: rotate(45deg);
  width: calc(0.4 * var(--lendi-ui-size));
  height: calc(1.2 * var(--lendi-ui-size));
  top: 2px;
}

<Component
  label="LUI single Checkbox"
  onChange={[Function]}
  value="1"
>
  <styled.label
    checked={false}
    disabled={false}
    isBoxed={false}
    size="md"
  >
    <StyledComponent
      checked={false}
      disabled={false}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htoDjs",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  width: 100%;
  display: flex;
  align-items: center;
  ",
              [Function],
              "
  ",
              [Function],
              "
  ",
              [Function],
              " ",
              [Function],
              ";
  :hover {
    ",
              [Function],
              ";
  }
",
            ],
          },
          "displayName": "styled.label",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htoDjs",
          "target": "label",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isBoxed={false}
      size="md"
    >
      <label
        checked={false}
        className="c0"
        disabled={false}
        size="md"
      >
        <styled.input
          checked={false}
          disabled={false}
          inputSize="md"
          onChange={[Function]}
          type="checkbox"
          value="1"
        >
          <StyledComponent
            checked={false}
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dnqmqq",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  flex-shrink: 0;
  cursor: pointer;
  position: relative;
  display: inline-block;
  appearance: none;
  border-radius: 3px;
  box-sizing: border-box;
  ",
                    "
    margin-left: ",
                    "calc(0.5 * var(--lendi-ui-size))",
                    ";
    margin-right: ",
                    "calc(0.5 * var(--lendi-ui-size))",
                    ";
  ",
                    "
  ",
                    [Function],
                    "}
  ",
                    [Function],
                    "
  :hover {
    ",
                    [Function],
                    ";
  }
  :focus {
    ",
                    [Function],
                    "
  }
  :disabled {
    cursor: not-allowed;
    pointer-events: none;
  }
  :checked::after {
    content: '';
    left: 0;
    right: 0;
    margin: auto;
    position: absolute;
    border: solid ",
                    [Function],
                    ";
    border-width: 0 2px 2px 0;
    transform: rotate(45deg);
    ",
                    [Function],
                    "
",
                  ],
                },
                "displayName": "styled.input",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dnqmqq",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            inputSize="md"
            onChange={[Function]}
            type="checkbox"
            value="1"
          >
            <input
              checked={false}
              className="c1"
              disabled={false}
              onChange={[Function]}
              type="checkbox"
              value="1"
            />
          </StyledComponent>
        </styled.input>
        <styled.p
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    "
  display: inline-block;
",
                  ],
                },
                "displayName": "styled.p",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "p",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <p
              className="c2"
              size="md"
            >
              LUI single Checkbox
            </p>
          </StyledComponent>
        </styled.p>
      </label>
    </StyledComponent>
  </styled.label>
</Component>
`;
