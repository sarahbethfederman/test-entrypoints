// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Modal size should render "lg" size styles on tablet and desktop 1`] = `
Array [
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(37.5 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c3 {
    padding-left: calc(2 * var(--lendi-ui-size));
    padding-right: calc(2 * var(--lendi-ui-size));
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
    padding-left: calc(2 * var(--lendi-ui-size));
    padding-right: calc(2 * var(--lendi-ui-size));
  }
}

<styled.div
    className="modal-container"
    isHeaderFixed={false}
    isVisible={true}
    size="lg"
  >
    <StyledComponent
      className="modal-container"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-fjdhpX",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  ",
              [Function],
              ";
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-fjdhpX",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isHeaderFixed={false}
      isVisible={true}
      size="lg"
    >
      <div
        className="c0 modal-container"
        size="lg"
      >
        <Styled(SvgClose)
          color="shade.300"
          onClick={[MockFunction]}
        >
          <StyledComponent
            color="shade.300"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-jzJRlG",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  ",
                    "
    padding: ",
                    "var(--lendi-ui-size)",
                    ";
  ",
                    " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
                  ],
                },
                "displayName": "Styled(SvgClose)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-jzJRlG",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onClick={[MockFunction]}
          >
            <SvgClose
              className="c1"
              color="shade.300"
              onClick={[MockFunction]}
            >
              <styled.span
                className="c1"
                color="shade.300"
                onClick={[MockFunction]}
              >
                <StyledComponent
                  className="c1"
                  color="shade.300"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-htoDjs",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "
  width: ",
                          [Function],
                          ";
  height: ",
                          [Function],
                          ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                          [Function],
                          ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                          [Function],
                          ";
  }
",
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-htoDjs",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  onClick={[MockFunction]}
                >
                  <span
                    className="c2 c1"
                    color="shade.300"
                    onClick={[MockFunction]}
                  >
                    <svg
                      viewBox="0 0 24 24"
                    >
                      <path
                        d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                      />
                      <path
                        d="M0 0h24v24H0z"
                        fill="none"
                      />
                    </svg>
                  </span>
                </StyledComponent>
              </styled.span>
            </SvgClose>
          </StyledComponent>
        </Styled(SvgClose)>
      </div>
    </StyledComponent>
  </styled.div>,
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(37.5 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c3 {
    padding-left: calc(2 * var(--lendi-ui-size));
    padding-right: calc(2 * var(--lendi-ui-size));
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
    padding-left: calc(2 * var(--lendi-ui-size));
    padding-right: calc(2 * var(--lendi-ui-size));
  }
}

<StyledComponent
    className="modal-container"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-fjdhpX",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            [Function],
            ";
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-fjdhpX",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isHeaderFixed={false}
    isVisible={true}
    size="lg"
  >
    <div
      className="c0 modal-container"
      size="lg"
    >
      <Styled(SvgClose)
        color="shade.300"
        onClick={[MockFunction]}
      >
        <StyledComponent
          color="shade.300"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-jzJRlG",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  ",
                  "
    padding: ",
                  "var(--lendi-ui-size)",
                  ";
  ",
                  " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
                ],
              },
              "displayName": "Styled(SvgClose)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-jzJRlG",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          onClick={[MockFunction]}
        >
          <SvgClose
            className="c1"
            color="shade.300"
            onClick={[MockFunction]}
          >
            <styled.span
              className="c1"
              color="shade.300"
              onClick={[MockFunction]}
            >
              <StyledComponent
                className="c1"
                color="shade.300"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-htoDjs",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        "
  width: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                        [Function],
                        ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                        [Function],
                        ";
  }
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-htoDjs",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[MockFunction]}
              >
                <span
                  className="c2 c1"
                  color="shade.300"
                  onClick={[MockFunction]}
                >
                  <svg
                    viewBox="0 0 24 24"
                  >
                    <path
                      d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                    />
                    <path
                      d="M0 0h24v24H0z"
                      fill="none"
                    />
                  </svg>
                </span>
              </StyledComponent>
            </styled.span>
          </SvgClose>
        </StyledComponent>
      </Styled(SvgClose)>
    </div>
  </StyledComponent>,
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(37.5 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c3 {
    padding-left: calc(2 * var(--lendi-ui-size));
    padding-right: calc(2 * var(--lendi-ui-size));
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
    padding-left: calc(2 * var(--lendi-ui-size));
    padding-right: calc(2 * var(--lendi-ui-size));
  }
}

<div
    className="c0 modal-container"
    size="lg"
  >
    <Styled(SvgClose)
      color="shade.300"
      onClick={[MockFunction]}
    >
      <StyledComponent
        color="shade.300"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jzJRlG",
              "isStatic": false,
              "lastClassName": "c1",
              "rules": Array [
                "
  ",
                "
    padding: ",
                "var(--lendi-ui-size)",
                ";
  ",
                " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
              ],
            },
            "displayName": "Styled(SvgClose)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jzJRlG",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        onClick={[MockFunction]}
      >
        <SvgClose
          className="c1"
          color="shade.300"
          onClick={[MockFunction]}
        >
          <styled.span
            className="c1"
            color="shade.300"
            onClick={[MockFunction]}
          >
            <StyledComponent
              className="c1"
              color="shade.300"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htoDjs",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      "
  width: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                      [Function],
                      ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htoDjs",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[MockFunction]}
            >
              <span
                className="c2 c1"
                color="shade.300"
                onClick={[MockFunction]}
              >
                <svg
                  viewBox="0 0 24 24"
                >
                  <path
                    d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                  />
                  <path
                    d="M0 0h24v24H0z"
                    fill="none"
                  />
                </svg>
              </span>
            </StyledComponent>
          </styled.span>
        </SvgClose>
      </StyledComponent>
    </Styled(SvgClose)>
  </div>,
]
`;

exports[`Modal size should render "md" size styles on tablet and desktop 1`] = `
Array [
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(25 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
  }
}

<styled.div
    className="modal-container"
    isHeaderFixed={false}
    isVisible={true}
    size="md"
  >
    <StyledComponent
      className="modal-container"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-fjdhpX",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  ",
              [Function],
              ";
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-fjdhpX",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isHeaderFixed={false}
      isVisible={true}
      size="md"
    >
      <div
        className="c0 modal-container"
        size="md"
      >
        <Styled(SvgClose)
          color="shade.300"
          onClick={[MockFunction]}
        >
          <StyledComponent
            color="shade.300"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-jzJRlG",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  ",
                    "
    padding: ",
                    "var(--lendi-ui-size)",
                    ";
  ",
                    " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
                  ],
                },
                "displayName": "Styled(SvgClose)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-jzJRlG",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onClick={[MockFunction]}
          >
            <SvgClose
              className="c1"
              color="shade.300"
              onClick={[MockFunction]}
            >
              <styled.span
                className="c1"
                color="shade.300"
                onClick={[MockFunction]}
              >
                <StyledComponent
                  className="c1"
                  color="shade.300"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-htoDjs",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "
  width: ",
                          [Function],
                          ";
  height: ",
                          [Function],
                          ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                          [Function],
                          ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                          [Function],
                          ";
  }
",
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-htoDjs",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  onClick={[MockFunction]}
                >
                  <span
                    className="c2 c1"
                    color="shade.300"
                    onClick={[MockFunction]}
                  >
                    <svg
                      viewBox="0 0 24 24"
                    >
                      <path
                        d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                      />
                      <path
                        d="M0 0h24v24H0z"
                        fill="none"
                      />
                    </svg>
                  </span>
                </StyledComponent>
              </styled.span>
            </SvgClose>
          </StyledComponent>
        </Styled(SvgClose)>
      </div>
    </StyledComponent>
  </styled.div>,
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(25 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
  }
}

<StyledComponent
    className="modal-container"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-fjdhpX",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            [Function],
            ";
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-fjdhpX",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isHeaderFixed={false}
    isVisible={true}
    size="md"
  >
    <div
      className="c0 modal-container"
      size="md"
    >
      <Styled(SvgClose)
        color="shade.300"
        onClick={[MockFunction]}
      >
        <StyledComponent
          color="shade.300"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-jzJRlG",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  ",
                  "
    padding: ",
                  "var(--lendi-ui-size)",
                  ";
  ",
                  " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
                ],
              },
              "displayName": "Styled(SvgClose)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-jzJRlG",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          onClick={[MockFunction]}
        >
          <SvgClose
            className="c1"
            color="shade.300"
            onClick={[MockFunction]}
          >
            <styled.span
              className="c1"
              color="shade.300"
              onClick={[MockFunction]}
            >
              <StyledComponent
                className="c1"
                color="shade.300"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-htoDjs",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        "
  width: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                        [Function],
                        ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                        [Function],
                        ";
  }
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-htoDjs",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[MockFunction]}
              >
                <span
                  className="c2 c1"
                  color="shade.300"
                  onClick={[MockFunction]}
                >
                  <svg
                    viewBox="0 0 24 24"
                  >
                    <path
                      d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                    />
                    <path
                      d="M0 0h24v24H0z"
                      fill="none"
                    />
                  </svg>
                </span>
              </StyledComponent>
            </styled.span>
          </SvgClose>
        </StyledComponent>
      </Styled(SvgClose)>
    </div>
  </StyledComponent>,
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(25 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
  }
}

<div
    className="c0 modal-container"
    size="md"
  >
    <Styled(SvgClose)
      color="shade.300"
      onClick={[MockFunction]}
    >
      <StyledComponent
        color="shade.300"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jzJRlG",
              "isStatic": false,
              "lastClassName": "c1",
              "rules": Array [
                "
  ",
                "
    padding: ",
                "var(--lendi-ui-size)",
                ";
  ",
                " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
              ],
            },
            "displayName": "Styled(SvgClose)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jzJRlG",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        onClick={[MockFunction]}
      >
        <SvgClose
          className="c1"
          color="shade.300"
          onClick={[MockFunction]}
        >
          <styled.span
            className="c1"
            color="shade.300"
            onClick={[MockFunction]}
          >
            <StyledComponent
              className="c1"
              color="shade.300"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htoDjs",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      "
  width: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                      [Function],
                      ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htoDjs",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[MockFunction]}
            >
              <span
                className="c2 c1"
                color="shade.300"
                onClick={[MockFunction]}
              >
                <svg
                  viewBox="0 0 24 24"
                >
                  <path
                    d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                  />
                  <path
                    d="M0 0h24v24H0z"
                    fill="none"
                  />
                </svg>
              </span>
            </StyledComponent>
          </styled.span>
        </SvgClose>
      </StyledComponent>
    </Styled(SvgClose)>
  </div>,
]
`;

exports[`Modal size should render "sm" size styles on tablet and desktop 1`] = `
Array [
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(22 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
  }
}

<styled.div
    className="modal-container"
    isHeaderFixed={false}
    isVisible={true}
    size="sm"
  >
    <StyledComponent
      className="modal-container"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-fjdhpX",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  ",
              [Function],
              ";
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-fjdhpX",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isHeaderFixed={false}
      isVisible={true}
      size="sm"
    >
      <div
        className="c0 modal-container"
        size="sm"
      >
        <Styled(SvgClose)
          color="shade.300"
          onClick={[MockFunction]}
        >
          <StyledComponent
            color="shade.300"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-jzJRlG",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  ",
                    "
    padding: ",
                    "var(--lendi-ui-size)",
                    ";
  ",
                    " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
                  ],
                },
                "displayName": "Styled(SvgClose)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-jzJRlG",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onClick={[MockFunction]}
          >
            <SvgClose
              className="c1"
              color="shade.300"
              onClick={[MockFunction]}
            >
              <styled.span
                className="c1"
                color="shade.300"
                onClick={[MockFunction]}
              >
                <StyledComponent
                  className="c1"
                  color="shade.300"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-htoDjs",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "
  width: ",
                          [Function],
                          ";
  height: ",
                          [Function],
                          ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                          [Function],
                          ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                          [Function],
                          ";
  }
",
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-htoDjs",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  onClick={[MockFunction]}
                >
                  <span
                    className="c2 c1"
                    color="shade.300"
                    onClick={[MockFunction]}
                  >
                    <svg
                      viewBox="0 0 24 24"
                    >
                      <path
                        d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                      />
                      <path
                        d="M0 0h24v24H0z"
                        fill="none"
                      />
                    </svg>
                  </span>
                </StyledComponent>
              </styled.span>
            </SvgClose>
          </StyledComponent>
        </Styled(SvgClose)>
      </div>
    </StyledComponent>
  </styled.div>,
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(22 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
  }
}

<StyledComponent
    className="modal-container"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-fjdhpX",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            [Function],
            ";
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-fjdhpX",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isHeaderFixed={false}
    isVisible={true}
    size="sm"
  >
    <div
      className="c0 modal-container"
      size="sm"
    >
      <Styled(SvgClose)
        color="shade.300"
        onClick={[MockFunction]}
      >
        <StyledComponent
          color="shade.300"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-jzJRlG",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  ",
                  "
    padding: ",
                  "var(--lendi-ui-size)",
                  ";
  ",
                  " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
                ],
              },
              "displayName": "Styled(SvgClose)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-jzJRlG",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          onClick={[MockFunction]}
        >
          <SvgClose
            className="c1"
            color="shade.300"
            onClick={[MockFunction]}
          >
            <styled.span
              className="c1"
              color="shade.300"
              onClick={[MockFunction]}
            >
              <StyledComponent
                className="c1"
                color="shade.300"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-htoDjs",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        "
  width: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                        [Function],
                        ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                        [Function],
                        ";
  }
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-htoDjs",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[MockFunction]}
              >
                <span
                  className="c2 c1"
                  color="shade.300"
                  onClick={[MockFunction]}
                >
                  <svg
                    viewBox="0 0 24 24"
                  >
                    <path
                      d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                    />
                    <path
                      d="M0 0h24v24H0z"
                      fill="none"
                    />
                  </svg>
                </span>
              </StyledComponent>
            </styled.span>
          </SvgClose>
        </StyledComponent>
      </Styled(SvgClose)>
    </div>
  </StyledComponent>,
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(22 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
  }
}

<div
    className="c0 modal-container"
    size="sm"
  >
    <Styled(SvgClose)
      color="shade.300"
      onClick={[MockFunction]}
    >
      <StyledComponent
        color="shade.300"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jzJRlG",
              "isStatic": false,
              "lastClassName": "c1",
              "rules": Array [
                "
  ",
                "
    padding: ",
                "var(--lendi-ui-size)",
                ";
  ",
                " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
              ],
            },
            "displayName": "Styled(SvgClose)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jzJRlG",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        onClick={[MockFunction]}
      >
        <SvgClose
          className="c1"
          color="shade.300"
          onClick={[MockFunction]}
        >
          <styled.span
            className="c1"
            color="shade.300"
            onClick={[MockFunction]}
          >
            <StyledComponent
              className="c1"
              color="shade.300"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htoDjs",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      "
  width: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                      [Function],
                      ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htoDjs",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[MockFunction]}
            >
              <span
                className="c2 c1"
                color="shade.300"
                onClick={[MockFunction]}
              >
                <svg
                  viewBox="0 0 24 24"
                >
                  <path
                    d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                  />
                  <path
                    d="M0 0h24v24H0z"
                    fill="none"
                  />
                </svg>
              </span>
            </StyledComponent>
          </styled.span>
        </SvgClose>
      </StyledComponent>
    </Styled(SvgClose)>
  </div>,
]
`;

exports[`Modal size should render 'md' as default if there are no size value on tablet and desktop 1`] = `
Array [
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(25 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
  }
}

<styled.div
    className="modal-container"
    isHeaderFixed={false}
    isVisible={true}
  >
    <StyledComponent
      className="modal-container"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-fjdhpX",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  ",
              [Function],
              ";
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-fjdhpX",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isHeaderFixed={false}
      isVisible={true}
    >
      <div
        className="c0 modal-container"
      >
        <Styled(SvgClose)
          color="shade.300"
          onClick={[MockFunction]}
        >
          <StyledComponent
            color="shade.300"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-jzJRlG",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  ",
                    "
    padding: ",
                    "var(--lendi-ui-size)",
                    ";
  ",
                    " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
                  ],
                },
                "displayName": "Styled(SvgClose)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-jzJRlG",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onClick={[MockFunction]}
          >
            <SvgClose
              className="c1"
              color="shade.300"
              onClick={[MockFunction]}
            >
              <styled.span
                className="c1"
                color="shade.300"
                onClick={[MockFunction]}
              >
                <StyledComponent
                  className="c1"
                  color="shade.300"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-htoDjs",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "
  width: ",
                          [Function],
                          ";
  height: ",
                          [Function],
                          ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                          [Function],
                          ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                          [Function],
                          ";
  }
",
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-htoDjs",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  onClick={[MockFunction]}
                >
                  <span
                    className="c2 c1"
                    color="shade.300"
                    onClick={[MockFunction]}
                  >
                    <svg
                      viewBox="0 0 24 24"
                    >
                      <path
                        d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                      />
                      <path
                        d="M0 0h24v24H0z"
                        fill="none"
                      />
                    </svg>
                  </span>
                </StyledComponent>
              </styled.span>
            </SvgClose>
          </StyledComponent>
        </Styled(SvgClose)>
      </div>
    </StyledComponent>
  </styled.div>,
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(25 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
  }
}

<StyledComponent
    className="modal-container"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-fjdhpX",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            [Function],
            ";
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-fjdhpX",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isHeaderFixed={false}
    isVisible={true}
  >
    <div
      className="c0 modal-container"
    >
      <Styled(SvgClose)
        color="shade.300"
        onClick={[MockFunction]}
      >
        <StyledComponent
          color="shade.300"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-jzJRlG",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  ",
                  "
    padding: ",
                  "var(--lendi-ui-size)",
                  ";
  ",
                  " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
                ],
              },
              "displayName": "Styled(SvgClose)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-jzJRlG",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          onClick={[MockFunction]}
        >
          <SvgClose
            className="c1"
            color="shade.300"
            onClick={[MockFunction]}
          >
            <styled.span
              className="c1"
              color="shade.300"
              onClick={[MockFunction]}
            >
              <StyledComponent
                className="c1"
                color="shade.300"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-htoDjs",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        "
  width: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                        [Function],
                        ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                        [Function],
                        ";
  }
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-htoDjs",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[MockFunction]}
              >
                <span
                  className="c2 c1"
                  color="shade.300"
                  onClick={[MockFunction]}
                >
                  <svg
                    viewBox="0 0 24 24"
                  >
                    <path
                      d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                    />
                    <path
                      d="M0 0h24v24H0z"
                      fill="none"
                    />
                  </svg>
                </span>
              </StyledComponent>
            </styled.span>
          </SvgClose>
        </StyledComponent>
      </Styled(SvgClose)>
    </div>
  </StyledComponent>,
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(25 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
  }
}

<div
    className="c0 modal-container"
  >
    <Styled(SvgClose)
      color="shade.300"
      onClick={[MockFunction]}
    >
      <StyledComponent
        color="shade.300"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jzJRlG",
              "isStatic": false,
              "lastClassName": "c1",
              "rules": Array [
                "
  ",
                "
    padding: ",
                "var(--lendi-ui-size)",
                ";
  ",
                " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
              ],
            },
            "displayName": "Styled(SvgClose)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jzJRlG",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        onClick={[MockFunction]}
      >
        <SvgClose
          className="c1"
          color="shade.300"
          onClick={[MockFunction]}
        >
          <styled.span
            className="c1"
            color="shade.300"
            onClick={[MockFunction]}
          >
            <StyledComponent
              className="c1"
              color="shade.300"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htoDjs",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      "
  width: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                      [Function],
                      ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htoDjs",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[MockFunction]}
            >
              <span
                className="c2 c1"
                color="shade.300"
                onClick={[MockFunction]}
              >
                <svg
                  viewBox="0 0 24 24"
                >
                  <path
                    d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                  />
                  <path
                    d="M0 0h24v24H0z"
                    fill="none"
                  />
                </svg>
              </span>
            </StyledComponent>
          </styled.span>
        </SvgClose>
      </StyledComponent>
    </Styled(SvgClose)>
  </div>,
]
`;

exports[`Modal size should render with full width no matter what "lg" is on mobile 1`] = `
Array [
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(37.5 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c3 {
    padding-left: calc(2 * var(--lendi-ui-size));
    padding-right: calc(2 * var(--lendi-ui-size));
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
    padding-left: calc(2 * var(--lendi-ui-size));
    padding-right: calc(2 * var(--lendi-ui-size));
  }
}

<styled.div
    className="modal-container"
    isHeaderFixed={false}
    isVisible={true}
    size="lg"
  >
    <StyledComponent
      className="modal-container"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-fjdhpX",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  ",
              [Function],
              ";
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-fjdhpX",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isHeaderFixed={false}
      isVisible={true}
      size="lg"
    >
      <div
        className="c0 modal-container"
        size="lg"
      >
        <Styled(SvgClose)
          color="shade.300"
          onClick={[MockFunction]}
        >
          <StyledComponent
            color="shade.300"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-jzJRlG",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  ",
                    "
    padding: ",
                    "var(--lendi-ui-size)",
                    ";
  ",
                    " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
                  ],
                },
                "displayName": "Styled(SvgClose)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-jzJRlG",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onClick={[MockFunction]}
          >
            <SvgClose
              className="c1"
              color="shade.300"
              onClick={[MockFunction]}
            >
              <styled.span
                className="c1"
                color="shade.300"
                onClick={[MockFunction]}
              >
                <StyledComponent
                  className="c1"
                  color="shade.300"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-htoDjs",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "
  width: ",
                          [Function],
                          ";
  height: ",
                          [Function],
                          ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                          [Function],
                          ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                          [Function],
                          ";
  }
",
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-htoDjs",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  onClick={[MockFunction]}
                >
                  <span
                    className="c2 c1"
                    color="shade.300"
                    onClick={[MockFunction]}
                  >
                    <svg
                      viewBox="0 0 24 24"
                    >
                      <path
                        d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                      />
                      <path
                        d="M0 0h24v24H0z"
                        fill="none"
                      />
                    </svg>
                  </span>
                </StyledComponent>
              </styled.span>
            </SvgClose>
          </StyledComponent>
        </Styled(SvgClose)>
      </div>
    </StyledComponent>
  </styled.div>,
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(37.5 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c3 {
    padding-left: calc(2 * var(--lendi-ui-size));
    padding-right: calc(2 * var(--lendi-ui-size));
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
    padding-left: calc(2 * var(--lendi-ui-size));
    padding-right: calc(2 * var(--lendi-ui-size));
  }
}

<StyledComponent
    className="modal-container"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-fjdhpX",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            [Function],
            ";
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-fjdhpX",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isHeaderFixed={false}
    isVisible={true}
    size="lg"
  >
    <div
      className="c0 modal-container"
      size="lg"
    >
      <Styled(SvgClose)
        color="shade.300"
        onClick={[MockFunction]}
      >
        <StyledComponent
          color="shade.300"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-jzJRlG",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  ",
                  "
    padding: ",
                  "var(--lendi-ui-size)",
                  ";
  ",
                  " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
                ],
              },
              "displayName": "Styled(SvgClose)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-jzJRlG",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          onClick={[MockFunction]}
        >
          <SvgClose
            className="c1"
            color="shade.300"
            onClick={[MockFunction]}
          >
            <styled.span
              className="c1"
              color="shade.300"
              onClick={[MockFunction]}
            >
              <StyledComponent
                className="c1"
                color="shade.300"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-htoDjs",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        "
  width: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                        [Function],
                        ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                        [Function],
                        ";
  }
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-htoDjs",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[MockFunction]}
              >
                <span
                  className="c2 c1"
                  color="shade.300"
                  onClick={[MockFunction]}
                >
                  <svg
                    viewBox="0 0 24 24"
                  >
                    <path
                      d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                    />
                    <path
                      d="M0 0h24v24H0z"
                      fill="none"
                    />
                  </svg>
                </span>
              </StyledComponent>
            </styled.span>
          </SvgClose>
        </StyledComponent>
      </Styled(SvgClose)>
    </div>
  </StyledComponent>,
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(37.5 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c3 {
    padding-left: calc(2 * var(--lendi-ui-size));
    padding-right: calc(2 * var(--lendi-ui-size));
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
    padding-left: calc(2 * var(--lendi-ui-size));
    padding-right: calc(2 * var(--lendi-ui-size));
  }
}

<div
    className="c0 modal-container"
    size="lg"
  >
    <Styled(SvgClose)
      color="shade.300"
      onClick={[MockFunction]}
    >
      <StyledComponent
        color="shade.300"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jzJRlG",
              "isStatic": false,
              "lastClassName": "c1",
              "rules": Array [
                "
  ",
                "
    padding: ",
                "var(--lendi-ui-size)",
                ";
  ",
                " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
              ],
            },
            "displayName": "Styled(SvgClose)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jzJRlG",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        onClick={[MockFunction]}
      >
        <SvgClose
          className="c1"
          color="shade.300"
          onClick={[MockFunction]}
        >
          <styled.span
            className="c1"
            color="shade.300"
            onClick={[MockFunction]}
          >
            <StyledComponent
              className="c1"
              color="shade.300"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htoDjs",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      "
  width: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                      [Function],
                      ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htoDjs",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[MockFunction]}
            >
              <span
                className="c2 c1"
                color="shade.300"
                onClick={[MockFunction]}
              >
                <svg
                  viewBox="0 0 24 24"
                >
                  <path
                    d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                  />
                  <path
                    d="M0 0h24v24H0z"
                    fill="none"
                  />
                </svg>
              </span>
            </StyledComponent>
          </styled.span>
        </SvgClose>
      </StyledComponent>
    </Styled(SvgClose)>
  </div>,
]
`;

exports[`Modal size should render with full width no matter what "md" is on mobile 1`] = `
Array [
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(25 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
  }
}

<styled.div
    className="modal-container"
    isHeaderFixed={false}
    isVisible={true}
    size="md"
  >
    <StyledComponent
      className="modal-container"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-fjdhpX",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  ",
              [Function],
              ";
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-fjdhpX",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isHeaderFixed={false}
      isVisible={true}
      size="md"
    >
      <div
        className="c0 modal-container"
        size="md"
      >
        <Styled(SvgClose)
          color="shade.300"
          onClick={[MockFunction]}
        >
          <StyledComponent
            color="shade.300"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-jzJRlG",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  ",
                    "
    padding: ",
                    "var(--lendi-ui-size)",
                    ";
  ",
                    " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
                  ],
                },
                "displayName": "Styled(SvgClose)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-jzJRlG",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onClick={[MockFunction]}
          >
            <SvgClose
              className="c1"
              color="shade.300"
              onClick={[MockFunction]}
            >
              <styled.span
                className="c1"
                color="shade.300"
                onClick={[MockFunction]}
              >
                <StyledComponent
                  className="c1"
                  color="shade.300"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-htoDjs",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "
  width: ",
                          [Function],
                          ";
  height: ",
                          [Function],
                          ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                          [Function],
                          ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                          [Function],
                          ";
  }
",
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-htoDjs",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  onClick={[MockFunction]}
                >
                  <span
                    className="c2 c1"
                    color="shade.300"
                    onClick={[MockFunction]}
                  >
                    <svg
                      viewBox="0 0 24 24"
                    >
                      <path
                        d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                      />
                      <path
                        d="M0 0h24v24H0z"
                        fill="none"
                      />
                    </svg>
                  </span>
                </StyledComponent>
              </styled.span>
            </SvgClose>
          </StyledComponent>
        </Styled(SvgClose)>
      </div>
    </StyledComponent>
  </styled.div>,
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(25 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
  }
}

<StyledComponent
    className="modal-container"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-fjdhpX",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            [Function],
            ";
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-fjdhpX",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isHeaderFixed={false}
    isVisible={true}
    size="md"
  >
    <div
      className="c0 modal-container"
      size="md"
    >
      <Styled(SvgClose)
        color="shade.300"
        onClick={[MockFunction]}
      >
        <StyledComponent
          color="shade.300"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-jzJRlG",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  ",
                  "
    padding: ",
                  "var(--lendi-ui-size)",
                  ";
  ",
                  " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
                ],
              },
              "displayName": "Styled(SvgClose)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-jzJRlG",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          onClick={[MockFunction]}
        >
          <SvgClose
            className="c1"
            color="shade.300"
            onClick={[MockFunction]}
          >
            <styled.span
              className="c1"
              color="shade.300"
              onClick={[MockFunction]}
            >
              <StyledComponent
                className="c1"
                color="shade.300"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-htoDjs",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        "
  width: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                        [Function],
                        ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                        [Function],
                        ";
  }
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-htoDjs",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[MockFunction]}
              >
                <span
                  className="c2 c1"
                  color="shade.300"
                  onClick={[MockFunction]}
                >
                  <svg
                    viewBox="0 0 24 24"
                  >
                    <path
                      d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                    />
                    <path
                      d="M0 0h24v24H0z"
                      fill="none"
                    />
                  </svg>
                </span>
              </StyledComponent>
            </styled.span>
          </SvgClose>
        </StyledComponent>
      </Styled(SvgClose)>
    </div>
  </StyledComponent>,
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(25 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
  }
}

<div
    className="c0 modal-container"
    size="md"
  >
    <Styled(SvgClose)
      color="shade.300"
      onClick={[MockFunction]}
    >
      <StyledComponent
        color="shade.300"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jzJRlG",
              "isStatic": false,
              "lastClassName": "c1",
              "rules": Array [
                "
  ",
                "
    padding: ",
                "var(--lendi-ui-size)",
                ";
  ",
                " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
              ],
            },
            "displayName": "Styled(SvgClose)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jzJRlG",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        onClick={[MockFunction]}
      >
        <SvgClose
          className="c1"
          color="shade.300"
          onClick={[MockFunction]}
        >
          <styled.span
            className="c1"
            color="shade.300"
            onClick={[MockFunction]}
          >
            <StyledComponent
              className="c1"
              color="shade.300"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htoDjs",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      "
  width: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                      [Function],
                      ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htoDjs",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[MockFunction]}
            >
              <span
                className="c2 c1"
                color="shade.300"
                onClick={[MockFunction]}
              >
                <svg
                  viewBox="0 0 24 24"
                >
                  <path
                    d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                  />
                  <path
                    d="M0 0h24v24H0z"
                    fill="none"
                  />
                </svg>
              </span>
            </StyledComponent>
          </styled.span>
        </SvgClose>
      </StyledComponent>
    </Styled(SvgClose)>
  </div>,
]
`;

exports[`Modal size should render with full width no matter what "sm" is on mobile 1`] = `
Array [
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(22 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
  }
}

<styled.div
    className="modal-container"
    isHeaderFixed={false}
    isVisible={true}
    size="sm"
  >
    <StyledComponent
      className="modal-container"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-fjdhpX",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  ",
              [Function],
              ";
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-fjdhpX",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isHeaderFixed={false}
      isVisible={true}
      size="sm"
    >
      <div
        className="c0 modal-container"
        size="sm"
      >
        <Styled(SvgClose)
          color="shade.300"
          onClick={[MockFunction]}
        >
          <StyledComponent
            color="shade.300"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-jzJRlG",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  ",
                    "
    padding: ",
                    "var(--lendi-ui-size)",
                    ";
  ",
                    " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
                  ],
                },
                "displayName": "Styled(SvgClose)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-jzJRlG",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onClick={[MockFunction]}
          >
            <SvgClose
              className="c1"
              color="shade.300"
              onClick={[MockFunction]}
            >
              <styled.span
                className="c1"
                color="shade.300"
                onClick={[MockFunction]}
              >
                <StyledComponent
                  className="c1"
                  color="shade.300"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-htoDjs",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "
  width: ",
                          [Function],
                          ";
  height: ",
                          [Function],
                          ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                          [Function],
                          ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                          [Function],
                          ";
  }
",
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-htoDjs",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  onClick={[MockFunction]}
                >
                  <span
                    className="c2 c1"
                    color="shade.300"
                    onClick={[MockFunction]}
                  >
                    <svg
                      viewBox="0 0 24 24"
                    >
                      <path
                        d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                      />
                      <path
                        d="M0 0h24v24H0z"
                        fill="none"
                      />
                    </svg>
                  </span>
                </StyledComponent>
              </styled.span>
            </SvgClose>
          </StyledComponent>
        </Styled(SvgClose)>
      </div>
    </StyledComponent>
  </styled.div>,
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(22 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
  }
}

<StyledComponent
    className="modal-container"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-fjdhpX",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            [Function],
            ";
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-fjdhpX",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isHeaderFixed={false}
    isVisible={true}
    size="sm"
  >
    <div
      className="c0 modal-container"
      size="sm"
    >
      <Styled(SvgClose)
        color="shade.300"
        onClick={[MockFunction]}
      >
        <StyledComponent
          color="shade.300"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-jzJRlG",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  ",
                  "
    padding: ",
                  "var(--lendi-ui-size)",
                  ";
  ",
                  " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
                ],
              },
              "displayName": "Styled(SvgClose)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-jzJRlG",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          onClick={[MockFunction]}
        >
          <SvgClose
            className="c1"
            color="shade.300"
            onClick={[MockFunction]}
          >
            <styled.span
              className="c1"
              color="shade.300"
              onClick={[MockFunction]}
            >
              <StyledComponent
                className="c1"
                color="shade.300"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-htoDjs",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        "
  width: ",
                        [Function],
                        ";
  height: ",
                        [Function],
                        ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                        [Function],
                        ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                        [Function],
                        ";
  }
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-htoDjs",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[MockFunction]}
              >
                <span
                  className="c2 c1"
                  color="shade.300"
                  onClick={[MockFunction]}
                >
                  <svg
                    viewBox="0 0 24 24"
                  >
                    <path
                      d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                    />
                    <path
                      d="M0 0h24v24H0z"
                      fill="none"
                    />
                  </svg>
                </span>
              </StyledComponent>
            </styled.span>
          </SvgClose>
        </StyledComponent>
      </Styled(SvgClose)>
    </div>
  </StyledComponent>,
  .c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(173,173,173,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(173,173,173,1);
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 0.97;
  z-index: 10;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 0;
  background-color: rgba(248,248,248,1);
}

.c0 .c3 {
  padding-top: calc(5 * var(--lendi-ui-size));
  padding-bottom: calc(2.5 * var(--lendi-ui-size));
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  min-height: 0;
  overflow: auto;
}

.c0 .c4 {
  padding-top: var(--lendi-ui-size);
  padding-bottom: var(--lendi-ui-size);
  padding-left: calc(1.5 * var(--lendi-ui-size));
  padding-right: calc(1.5 * var(--lendi-ui-size));
  border-radius: 0;
  box-shadow: 0 6px 10px 0 rgba(0,0,0,0.1), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px 0 rgba(0,0,0,0.14);
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c1 {
  padding: var(--lendi-ui-size);
  right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
}

@media (min-width:36rem) {
  .c0 {
    width: calc(22 * var(--lendi-ui-size));
    border-radius: 6px;
    height: initial;
    max-height: 85vh;
    opacity: 1;
  }
}

@media (min-width:36rem) {
  .c0 .c4 {
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
  }
}

<div
    className="c0 modal-container"
    size="sm"
  >
    <Styled(SvgClose)
      color="shade.300"
      onClick={[MockFunction]}
    >
      <StyledComponent
        color="shade.300"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jzJRlG",
              "isStatic": false,
              "lastClassName": "c1",
              "rules": Array [
                "
  ",
                "
    padding: ",
                "var(--lendi-ui-size)",
                ";
  ",
                " right: 0;
  width: 32px;
  height: 32px;
  position: absolute;
  cursor: pointer;
",
              ],
            },
            "displayName": "Styled(SvgClose)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jzJRlG",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        onClick={[MockFunction]}
      >
        <SvgClose
          className="c1"
          color="shade.300"
          onClick={[MockFunction]}
        >
          <styled.span
            className="c1"
            color="shade.300"
            onClick={[MockFunction]}
          >
            <StyledComponent
              className="c1"
              color="shade.300"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htoDjs",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      "
  width: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                      [Function],
                      ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htoDjs",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[MockFunction]}
            >
              <span
                className="c2 c1"
                color="shade.300"
                onClick={[MockFunction]}
              >
                <svg
                  viewBox="0 0 24 24"
                >
                  <path
                    d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                  />
                  <path
                    d="M0 0h24v24H0z"
                    fill="none"
                  />
                </svg>
              </span>
            </StyledComponent>
          </styled.span>
        </SvgClose>
      </StyledComponent>
    </Styled(SvgClose)>
  </div>,
]
`;
