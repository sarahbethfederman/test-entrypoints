// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DatePicker should render the component with month and year sections 1`] = `
.c2 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c2 > svg {
  fill: rgba(0,192,165,1);
  width: inherit;
  height: inherit;
}

.c2 .fillPath {
  fill: rgba(0,192,165,1);
}

.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  background-color: rgba(255,255,255,1);
  height: calc(3 * var(--lendi-ui-size));
  font-size: calc(1.125 * var(--lendi-ui-size));
  min-width: calc(11.75 * var(--lendi-ui-size));
  border: 1px solid rgba(200,200,200,1);
  font-family: 'Open Sans',sans-serif;
  border-radius: 6px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
}

.c0:hover {
  border: solid 1px rgba(95,95,95,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  min-width: calc(3 * var(--lendi-ui-size));
  padding-top: calc(0.1875 * var(--lendi-ui-size));
  font-size: calc(1.875 * var(--lendi-ui-size));
}

.c4 {
  font-size: inherit;
  height: 100%;
  width: 100%;
  border: 0px;
  padding: 0px;
  text-align: center;
}

.c6 {
  border-bottom-right-radius: 6px;
  border-top-right-radius: 6px;
  font-size: inherit;
  height: 100%;
  width: 100%;
  border: 0px;
  padding: 0px;
  text-align: center;
}

.c3 {
  border-left: solid 1px rgba(200,200,200,1);
  width: 100%;
  height: 100%;
}

.c5 {
  border-bottom-right-radius: 6px;
  border-top-right-radius: 6px;
  border-left: solid 1px rgba(200,200,200,1);
  width: 100%;
  height: 100%;
}

<DatePicker
  dayOnChange={[MockFunction]}
  monthOnChange={[MockFunction]}
  yearOnChange={[MockFunction]}
>
  <styled.div
    hasDayField={false}
    isDisabled={false}
    isError={false}
    size="md"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  ",
              "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
              "
  ",
              "
          background-color: ",
              [Function],
              ";
        ",
              "
  ",
              [Function],
              ";
  ",
              [Function],
              ";
  ",
              [Function],
              "
  font-family: ",
              [Function],
              ";
  border-radius: ",
              [Function],
              ";
  display: flex;
  flex-direction: row;
  align-items: flex-start;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      hasDayField={false}
      isDisabled={false}
      isError={false}
      size="md"
    >
      <div
        className="c0"
        size="md"
      >
        <styled.div
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: center;
  ",
                    [Function],
                    ";
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <div
              className="c1"
              size="md"
            >
              <Calendar
                color="primary.500"
              >
                <styled.span
                  color="primary.500"
                >
                  <StyledComponent
                    color="primary.500"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bwzfXH",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            "
  width: ",
                            [Function],
                            ";
  height: ",
                            [Function],
                            ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                            [Function],
                            ";
    width: inherit;
    height: inherit;
  }

  .fillPath {
    fill: ",
                            [Function],
                            ";
  }
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bwzfXH",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <span
                      className="c2"
                      color="primary.500"
                    >
                      <svg
                        fill="currentColor"
                        height="1em"
                        viewBox="0 0 24 24"
                        width="1em"
                      >
                        <path
                          d="M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19a2 2 0 002 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
                        />
                      </svg>
                    </span>
                  </StyledComponent>
                </styled.span>
              </Calendar>
            </div>
          </StyledComponent>
        </styled.div>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  border-left: solid 1px ",
                    [Function],
                    ";
  width: 100%;
  height: 100%;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c3"
            >
              <styled.input
                maxLength={2}
                onChange={[Function]}
                placeholder="MM"
                readOnly={false}
                type="text"
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-ifAKCX",
                        "isStatic": false,
                        "lastClassName": "c6",
                        "rules": Array [
                          "
  ",
                          [Function],
                          ";

  ",
                          [Function],
                          "
  font-size: inherit;
  height: 100%;
  width: 100%;
  border: 0px;
  padding: 0px;
  text-align: center;
",
                        ],
                      },
                      "displayName": "styled.input",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-ifAKCX",
                      "target": "input",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  maxLength={2}
                  onChange={[Function]}
                  placeholder="MM"
                  readOnly={false}
                  type="text"
                >
                  <input
                    className="c4"
                    maxLength={2}
                    onChange={[Function]}
                    placeholder="MM"
                    readOnly={false}
                    type="text"
                  />
                </StyledComponent>
              </styled.input>
            </div>
          </StyledComponent>
        </styled.div>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c5",
                  "rules": Array [
                    "
  border-bottom-right-radius: 6px;
  border-top-right-radius: 6px;
  border-left: solid 1px ",
                    [Function],
                    ";
  width: 100%;
  height: 100%;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c5"
            >
              <styled.input
                isRightEdge={true}
                maxLength={4}
                onChange={[Function]}
                placeholder="YYYY"
                readOnly={false}
                type="text"
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-ifAKCX",
                        "isStatic": false,
                        "lastClassName": "c6",
                        "rules": Array [
                          "
  ",
                          [Function],
                          ";

  ",
                          [Function],
                          "
  font-size: inherit;
  height: 100%;
  width: 100%;
  border: 0px;
  padding: 0px;
  text-align: center;
",
                        ],
                      },
                      "displayName": "styled.input",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-ifAKCX",
                      "target": "input",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isRightEdge={true}
                  maxLength={4}
                  onChange={[Function]}
                  placeholder="YYYY"
                  readOnly={false}
                  type="text"
                >
                  <input
                    className="c6"
                    maxLength={4}
                    onChange={[Function]}
                    placeholder="YYYY"
                    readOnly={false}
                    type="text"
                  />
                </StyledComponent>
              </styled.input>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</DatePicker>
`;
