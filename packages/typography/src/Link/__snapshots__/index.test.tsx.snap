// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Link should render styles for size lg 1`] = `
.c0 {
  font-size: 1em;
  border: none;
  padding: 0;
  font-size: calc(1.125 * var(--lendi-ui-size));
  line-height: calc(24 / 18);
  font-family: 'Open Sans',sans-serif;
  font-weight: bold;
  cursor: pointer;
  -webkit-text-decoration: underline;
  text-decoration: underline;
  color: currentColor;
  background-color: inherit;
}

.c0:hover,
.c0:focus,
.c0:active {
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

<Component
  size="lg"
>
  <styled.button
    size="lg"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-ifAKCX",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  font-size: 1em;
  border: none;
  padding: 0;
  ",
              [Function],
              " ",
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
",
              ";
  background-color: inherit;
",
            ],
          },
          "displayName": "styled.button",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-ifAKCX",
          "target": "button",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      size="lg"
    >
      <button
        className="c0"
        size="lg"
      />
    </StyledComponent>
  </styled.button>
</Component>
`;

exports[`Link should render styles for size md 1`] = `
.c0 {
  font-size: 1em;
  border: none;
  padding: 0;
  font-size: var(--lendi-ui-size);
  line-height: calc(24 / 16);
  font-family: 'Open Sans',sans-serif;
  font-weight: bold;
  cursor: pointer;
  -webkit-text-decoration: underline;
  text-decoration: underline;
  color: currentColor;
  background-color: inherit;
}

.c0:hover,
.c0:focus,
.c0:active {
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

<Component
  size="md"
>
  <styled.button
    size="md"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-ifAKCX",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  font-size: 1em;
  border: none;
  padding: 0;
  ",
              [Function],
              " ",
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
",
              ";
  background-color: inherit;
",
            ],
          },
          "displayName": "styled.button",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-ifAKCX",
          "target": "button",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      size="md"
    >
      <button
        className="c0"
        size="md"
      />
    </StyledComponent>
  </styled.button>
</Component>
`;

exports[`Link should render styles for size sm 1`] = `
.c0 {
  font-size: 1em;
  border: none;
  padding: 0;
  font-size: calc(0.875 * var(--lendi-ui-size));
  line-height: calc(20 / 14);
  font-family: 'Open Sans',sans-serif;
  font-weight: bold;
  cursor: pointer;
  -webkit-text-decoration: underline;
  text-decoration: underline;
  color: currentColor;
  background-color: inherit;
}

.c0:hover,
.c0:focus,
.c0:active {
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

<Component
  size="sm"
>
  <styled.button
    size="sm"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-ifAKCX",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  font-size: 1em;
  border: none;
  padding: 0;
  ",
              [Function],
              " ",
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
  ",
              [Function],
              "
",
              ";
  background-color: inherit;
",
            ],
          },
          "displayName": "styled.button",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-ifAKCX",
          "target": "button",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      size="sm"
    >
      <button
        className="c0"
        size="sm"
      />
    </StyledComponent>
  </styled.button>
</Component>
`;
