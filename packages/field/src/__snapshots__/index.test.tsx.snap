// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Field should render wrapper component 1`] = `
.c2 {
  margin-top: 0;
  margin-bottom: 0;
  font-size: calc(1.375 * var(--lendi-ui-size));
  font-weight: 400;
  line-height: calc(28 / 22);
  font-family: 'Cabin',sans-serif;
  font-size: var(--lendi-ui-size);
  margin-right: calc(0.5 * var(--lendi-ui-size));
  display: inline-block;
}

.c3 {
  margin-top: 0;
  margin-bottom: 0;
  color: rgba(146,146,146,1);
  font-size: calc(0.875 * var(--lendi-ui-size));
  line-height: calc(20 / 14);
  font-family: 'Open Sans',sans-serif;
  font-size: calc(0.75 * var(--lendi-ui-size));
}

.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 100%;
  height: 100%;
}

.c1 {
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin-bottom: calc(0.25 * var(--lendi-ui-size));
}

<styled.div>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-gZMcBi",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-gZMcBi",
        "target": "div",
        "toString": [Function],
        "usesTheme": false,
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <div
      className="c0"
    >
      <styled.label
        htmlFor={123456789}
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-gqjmRU",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "
  width: 100%;
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  justify-content: space-between;
  ",
                  "
    margin-bottom: ",
                  "calc(0.25 * var(--lendi-ui-size))",
                  ";
  ",
                  ";
",
                ],
              },
              "displayName": "styled.label",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-gqjmRU",
              "target": "label",
              "toString": [Function],
              "usesTheme": false,
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          htmlFor={123456789}
        >
          <label
            className="c1"
            htmlFor={123456789}
          >
            <Label
              isRequired={true}
              label="First name"
              size="sm"
            >
              <div>
                <Styled(Styled(HeadingTag))
                  size="sm"
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gzVnrw",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            "
  ",
                            "
    margin-top: ",
                            "0",
                            ";
    margin-bottom: ",
                            "0",
                            ";
  ",
                            "
  ",
                            [Function],
                            "
  ",
                            "
  ",
                            [Function],
                            "
  ",
                            [Function],
                            "
  ",
                            [Function],
                            "
  ",
                            [Function],
                            "
  ",
                            [Function],
                            "
  ",
                            [Function],
                            "
  ",
                            [Function],
                            "
",
                            ";
",
                            "
  ",
                            [Function],
                            " display: inline-block;
",
                          ],
                        },
                        "displayName": "Styled(Styled(HeadingTag))",
                        "foldedComponentIds": Array [
                          "sc-htpNat",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-gzVnrw",
                        "target": [Function],
                        "toString": [Function],
                        "usesTheme": false,
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                        Symbol(Symbol.hasInstance): [Function],
                      }
                    }
                    forwardedRef={null}
                    size="sm"
                  >
                    <HeadingTag
                      className="c2"
                      size="sm"
                    >
                      <h4
                        className="c2"
                        size="sm"
                      >
                        First name
                      </h4>
                    </HeadingTag>
                  </StyledComponent>
                </Styled(Styled(HeadingTag))>
                <Styled(styled.p)
                  color="shade.400"
                  size="sm"
                >
                  <StyledComponent
                    color="shade.400"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htoDjs",
                          "isStatic": false,
                          "lastClassName": "c3",
                          "rules": Array [
                            "
  ",
                            "
    margin-top: ",
                            "0",
                            ";
    margin-bottom: ",
                            "0",
                            ";
  ",
                            "
  ",
                            [Function],
                            "
  ",
                            "
  ",
                            [Function],
                            "
  ",
                            [Function],
                            "
  ",
                            [Function],
                            "
  ",
                            [Function],
                            "
  ",
                            [Function],
                            "
  ",
                            [Function],
                            "
  ",
                            [Function],
                            "
",
                            ";
",
                            "
  ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "Styled(styled.p)",
                        "foldedComponentIds": Array [
                          "sc-bwzfXH",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-htoDjs",
                        "target": "p",
                        "toString": [Function],
                        "usesTheme": false,
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    size="sm"
                  >
                    <p
                      className="c3"
                      color="shade.400"
                      size="sm"
                    />
                  </StyledComponent>
                </Styled(styled.p)>
              </div>
            </Label>
          </label>
        </StyledComponent>
      </styled.label>
    </div>
  </StyledComponent>
</styled.div>
`;
