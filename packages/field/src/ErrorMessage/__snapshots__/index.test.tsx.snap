// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ErrorMessage should render a div called "Wrapper" 1`] = `
.c0 {
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  -webkit-align-items: base-line;
  -webkit-box-align: base-line;
  -ms-flex-align: base-line;
  align-items: base-line;
  padding-top: calc(0.25 * var(--lendi-ui-size));
}

.c1 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c1 > svg {
  fill: #ff1c4a;
  width: inherit;
  height: inherit;
}

.c2 {
  margin-top: 0;
  margin-bottom: 0;
  color: rgba(255,28,74,1);
  font-size: calc(0.75 * var(--lendi-ui-size));
  line-height: calc(16 / 12);
  font-family: 'Open Sans',sans-serif;
  margin-left: calc(0.25 * var(--lendi-ui-size));
}

<styled.div
  color="error.500"
>
  <StyledComponent
    color="error.500"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bdVaJa",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  width: 100%;
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  align-items: base-line;
  ",
            "
    padding-top: ",
            "calc(0.25 * var(--lendi-ui-size))",
            ";
  ",
            ";
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bdVaJa",
        "target": "div",
        "toString": [Function],
        "usesTheme": false,
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <div
      className="c0"
      color="error.500"
    >
      <HighlightOff
        color="error.500"
      >
        <styled.span
          color="error.500"
        >
          <StyledComponent
            color="error.500"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  width: ",
                    [Function],
                    ";
  height: ",
                    [Function],
                    ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                    [Function],
                    ";
    width: inherit;
    height: inherit;
  }
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <span
              className="c1"
              color="error.500"
            >
              <svg
                height="1em"
                viewBox="0 0 24 24"
                width="1em"
              >
                <path
                  d="M0 0h24v24H0z"
                  fill="none"
                />
                <path
                  d="M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"
                />
              </svg>
            </span>
          </StyledComponent>
        </styled.span>
      </HighlightOff>
      <styled.p
        color="error.500"
        ml="xxxs"
        size="xs"
      >
        <StyledComponent
          color="error.500"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bxivhb",
                "isStatic": false,
                "lastClassName": "c2",
                "rules": Array [
                  "
  ",
                  "
    margin-top: ",
                  "0",
                  ";
    margin-bottom: ",
                  "0",
                  ";
  ",
                  "
  ",
                  [Function],
                  "
  ",
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
  ",
                  [Function],
                  "
",
                  ";
",
                ],
              },
              "displayName": "styled.p",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bxivhb",
              "target": "p",
              "toString": [Function],
              "usesTheme": false,
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          ml="xxxs"
          size="xs"
        >
          <p
            className="c2"
            color="error.500"
            size="xs"
          >
            error message
          </p>
        </StyledComponent>
      </styled.p>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`ErrorMessage should render a icon called "HighlightOff" 1`] = `
.c0 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c0 > svg {
  fill: #ff1c4a;
  width: inherit;
  height: inherit;
}

<HighlightOff
  color="error.500"
>
  <styled.span
    color="error.500"
  >
    <StyledComponent
      color="error.500"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  width: ",
              [Function],
              ";
  height: ",
              [Function],
              ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
              [Function],
              ";
    width: inherit;
    height: inherit;
  }
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": "span",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <span
        className="c0"
        color="error.500"
      >
        <svg
          height="1em"
          viewBox="0 0 24 24"
          width="1em"
        >
          <path
            d="M0 0h24v24H0z"
            fill="none"
          />
          <path
            d="M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"
          />
        </svg>
      </span>
    </StyledComponent>
  </styled.span>
</HighlightOff>
`;

exports[`ErrorMessage should render a paragraph use LUI Body called "MessageBody" 1`] = `
.c0 {
  margin-top: 0;
  margin-bottom: 0;
  color: rgba(255,28,74,1);
  font-size: calc(0.75 * var(--lendi-ui-size));
  line-height: calc(16 / 12);
  font-family: 'Open Sans',sans-serif;
  margin-left: calc(0.25 * var(--lendi-ui-size));
}

<styled.p
  color="error.500"
  ml="xxxs"
  size="xs"
>
  <StyledComponent
    color="error.500"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bxivhb",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
    margin-top: ",
            "0",
            ";
    margin-bottom: ",
            "0",
            ";
  ",
            "
  ",
            [Function],
            "
  ",
            "
  ",
            [Function],
            "
  ",
            [Function],
            "
  ",
            [Function],
            "
  ",
            [Function],
            "
  ",
            [Function],
            "
  ",
            [Function],
            "
  ",
            [Function],
            "
",
            ";
",
          ],
        },
        "displayName": "styled.p",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bxivhb",
        "target": "p",
        "toString": [Function],
        "usesTheme": false,
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    ml="xxxs"
    size="xs"
  >
    <p
      className="c0"
      color="error.500"
      size="xs"
    >
      error message
    </p>
  </StyledComponent>
</styled.p>
`;

exports[`ErrorMessage should render whole component 1`] = `
.c0 {
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  -webkit-align-items: base-line;
  -webkit-box-align: base-line;
  -ms-flex-align: base-line;
  align-items: base-line;
  padding-top: calc(0.25 * var(--lendi-ui-size));
}

.c1 {
  width: 1em;
  height: 1em;
  vertical-align: middle;
  display: inline-block;
}

.c1 > svg {
  fill: #ff1c4a;
  width: inherit;
  height: inherit;
}

.c2 {
  margin-top: 0;
  margin-bottom: 0;
  color: rgba(255,28,74,1);
  font-size: calc(0.75 * var(--lendi-ui-size));
  line-height: calc(16 / 12);
  font-family: 'Open Sans',sans-serif;
  margin-left: calc(0.25 * var(--lendi-ui-size));
}

<ErrorMessage
  error="error message"
>
  <styled.div
    color="error.500"
  >
    <StyledComponent
      color="error.500"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  width: 100%;
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  align-items: base-line;
  ",
              "
    padding-top: ",
              "calc(0.25 * var(--lendi-ui-size))",
              ";
  ",
              ";
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
        color="error.500"
      >
        <HighlightOff
          color="error.500"
        >
          <styled.span
            color="error.500"
          >
            <StyledComponent
              color="error.500"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htpNat",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  width: ",
                      [Function],
                      ";
  height: ",
                      [Function],
                      ";
  vertical-align: middle;
  display: inline-block;

  & > svg {
    fill: ",
                      [Function],
                      ";
    width: inherit;
    height: inherit;
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htpNat",
                  "target": "span",
                  "toString": [Function],
                  "usesTheme": false,
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <span
                className="c1"
                color="error.500"
              >
                <svg
                  height="1em"
                  viewBox="0 0 24 24"
                  width="1em"
                >
                  <path
                    d="M0 0h24v24H0z"
                    fill="none"
                  />
                  <path
                    d="M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"
                  />
                </svg>
              </span>
            </StyledComponent>
          </styled.span>
        </HighlightOff>
        <styled.p
          color="error.500"
          ml="xxxs"
          size="xs"
        >
          <StyledComponent
            color="error.500"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    "
    margin-top: ",
                    "0",
                    ";
    margin-bottom: ",
                    "0",
                    ";
  ",
                    "
  ",
                    [Function],
                    "
  ",
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
",
                    ";
",
                  ],
                },
                "displayName": "styled.p",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "p",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            ml="xxxs"
            size="xs"
          >
            <p
              className="c2"
              color="error.500"
              size="xs"
            >
              error message
            </p>
          </StyledComponent>
        </styled.p>
      </div>
    </StyledComponent>
  </styled.div>
</ErrorMessage>
`;
