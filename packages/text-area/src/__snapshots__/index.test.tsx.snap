// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Text area should render the text area component 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  resize: none;
  border-radius: 6px;
  box-sizing: border-box;
  font-family: 'Open Sans',sans-serif;
  color: rgba(71,71,71,1);
  width: auto;
  padding: calc(0.75 * var(--lendi-ui-size)) var(--lendi-ui-size);
  font-size: calc(1.125 * var(--lendi-ui-size));
  border: 1px solid rgba(200,200,200,1);
  background-color: rgba(255,255,255,1);
}

.c0::-webkit-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::-moz-placeholder {
  color: rgba(173,173,173,1);
}

.c0:-ms-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::placeholder {
  color: rgba(173,173,173,1);
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: hoverColor;
  -moz-var: hoverColor;
  -ms-var: hoverColor;
  var: hoverColor;
  return: hoverColor;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  hoverColor: = color_1.color('shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  hoverColor: = color_1.color('shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  hoverColor: = color_1.color('error.500');
}

<ForwardRef
  onChange={[MockFunction]}
  placeholder="input here ..."
>
  <styled.textarea
    className=""
    disabled={false}
    isDisabled={false}
    isError={false}
    isFullWidth={false}
    isInverse={false}
    onChange={[MockFunction]}
    placeholder="input here ..."
    size="md"
  >
    <StyledComponent
      className=""
      disabled={false}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  ",
              "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
              ";
  resize: none;
  border-radius: ",
              [Function],
              ";
  box-sizing: border-box;
  font-family: ",
              [Function],
              ";
  ",
              [Function],
              " ",
              [Function],
              ";
  ::placeholder {
    color: ",
              [Function],
              ";
  }
  :hover:not(:focus) {
    ",
              [Function],
              "
  }
",
            ],
          },
          "displayName": "styled.textarea",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "textarea",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isDisabled={false}
      isError={false}
      isFullWidth={false}
      isInverse={false}
      onChange={[MockFunction]}
      placeholder="input here ..."
      size="md"
    >
      <textarea
        className="c0"
        disabled={false}
        onChange={[MockFunction]}
        placeholder="input here ..."
        size="md"
      />
    </StyledComponent>
  </styled.textarea>
</ForwardRef>
`;

exports[`Text area variations of the text area in all given sizes lg should render 100% width of with isFullWidth prop 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  resize: none;
  border-radius: 6px;
  box-sizing: border-box;
  font-family: 'Open Sans',sans-serif;
  color: rgba(71,71,71,1);
  width: 100%;
  padding: calc(0.75 * var(--lendi-ui-size)) var(--lendi-ui-size);
  font-size: calc(1.125 * var(--lendi-ui-size));
  border: 1px solid rgba(200,200,200,1);
  background-color: rgba(255,255,255,1);
}

.c0::-webkit-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::-moz-placeholder {
  color: rgba(173,173,173,1);
}

.c0:-ms-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::placeholder {
  color: rgba(173,173,173,1);
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: hoverColor;
  -moz-var: hoverColor;
  -ms-var: hoverColor;
  var: hoverColor;
  return: hoverColor;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  hoverColor: = color_1.color('shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  hoverColor: = color_1.color('shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  hoverColor: = color_1.color('error.500');
}

<styled.textarea
  className=""
  disabled={false}
  isDisabled={false}
  isError={false}
  isFullWidth={true}
  isInverse={false}
  onChange={[MockFunction]}
  placeholder="input here ..."
  size="md"
>
  <StyledComponent
    className=""
    disabled={false}
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  resize: none;
  border-radius: ",
            [Function],
            ";
  box-sizing: border-box;
  font-family: ",
            [Function],
            ";
  ",
            [Function],
            " ",
            [Function],
            ";
  ::placeholder {
    color: ",
            [Function],
            ";
  }
  :hover:not(:focus) {
    ",
            [Function],
            "
  }
",
          ],
        },
        "displayName": "styled.textarea",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "textarea",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={false}
    isFullWidth={true}
    isInverse={false}
    onChange={[MockFunction]}
    placeholder="input here ..."
    size="md"
  >
    <textarea
      className="c0"
      disabled={false}
      onChange={[MockFunction]}
      placeholder="input here ..."
      size="md"
    />
  </StyledComponent>
</styled.textarea>
`;

exports[`Text area variations of the text area in all given sizes lg should render the component in a disabled state with the isDisabled prop 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  resize: none;
  border-radius: 6px;
  box-sizing: border-box;
  font-family: 'Open Sans',sans-serif;
  color: rgba(71,71,71,1);
  width: auto;
  padding: calc(0.75 * var(--lendi-ui-size)) var(--lendi-ui-size);
  font-size: calc(1.125 * var(--lendi-ui-size));
  cursor: not-allowed;
  background-color: #f8f8f8;
  border: 1px solid rgba(227,227,227,1);
}

.c0::-webkit-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::-moz-placeholder {
  color: rgba(173,173,173,1);
}

.c0:-ms-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::placeholder {
  color: rgba(173,173,173,1);
}

<styled.textarea
  className=""
  disabled={true}
  isDisabled={true}
  isError={false}
  isFullWidth={false}
  isInverse={false}
  onChange={[MockFunction]}
  placeholder="input here ..."
  size="md"
>
  <StyledComponent
    className=""
    disabled={true}
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  resize: none;
  border-radius: ",
            [Function],
            ";
  box-sizing: border-box;
  font-family: ",
            [Function],
            ";
  ",
            [Function],
            " ",
            [Function],
            ";
  ::placeholder {
    color: ",
            [Function],
            ";
  }
  :hover:not(:focus) {
    ",
            [Function],
            "
  }
",
          ],
        },
        "displayName": "styled.textarea",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "textarea",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={true}
    isError={false}
    isFullWidth={false}
    isInverse={false}
    onChange={[MockFunction]}
    placeholder="input here ..."
    size="md"
  >
    <textarea
      className="c0"
      disabled={true}
      onChange={[MockFunction]}
      placeholder="input here ..."
      size="md"
    />
  </StyledComponent>
</styled.textarea>
`;

exports[`Text area variations of the text area in all given sizes lg should render the component with a red border if the isError state is true 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  resize: none;
  border-radius: 6px;
  box-sizing: border-box;
  font-family: 'Open Sans',sans-serif;
  color: rgba(71,71,71,1);
  width: auto;
  padding: calc(0.75 * var(--lendi-ui-size)) var(--lendi-ui-size);
  font-size: calc(1.125 * var(--lendi-ui-size));
  border: 1px solid rgba(255,28,74,1);
  background-color: rgba(255,255,255,1);
}

.c0::-webkit-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::-moz-placeholder {
  color: rgba(173,173,173,1);
}

.c0:-ms-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::placeholder {
  color: rgba(173,173,173,1);
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: hoverColor;
  -moz-var: hoverColor;
  -ms-var: hoverColor;
  var: hoverColor;
  return: hoverColor;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  hoverColor: = color_1.color('shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  hoverColor: = color_1.color('shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  hoverColor: = color_1.color('error.500');
}

<styled.textarea
  className=""
  disabled={false}
  isDisabled={false}
  isError={true}
  isFullWidth={false}
  isInverse={false}
  onChange={[MockFunction]}
  placeholder="input here ..."
  size="md"
>
  <StyledComponent
    className=""
    disabled={false}
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  resize: none;
  border-radius: ",
            [Function],
            ";
  box-sizing: border-box;
  font-family: ",
            [Function],
            ";
  ",
            [Function],
            " ",
            [Function],
            ";
  ::placeholder {
    color: ",
            [Function],
            ";
  }
  :hover:not(:focus) {
    ",
            [Function],
            "
  }
",
          ],
        },
        "displayName": "styled.textarea",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "textarea",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={true}
    isFullWidth={false}
    isInverse={false}
    onChange={[MockFunction]}
    placeholder="input here ..."
    size="md"
  >
    <textarea
      className="c0"
      disabled={false}
      onChange={[MockFunction]}
      placeholder="input here ..."
      size="md"
    />
  </StyledComponent>
</styled.textarea>
`;

exports[`Text area variations of the text area in all given sizes lg should render the component with a white border and transparent background if the isInverse prop is true 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  resize: none;
  border-radius: 6px;
  box-sizing: border-box;
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  width: auto;
  padding: calc(0.75 * var(--lendi-ui-size)) var(--lendi-ui-size);
  font-size: calc(1.125 * var(--lendi-ui-size));
  border: 1px solid rgba(248,248,248,1);
  background-color: transparent;
}

.c0::-webkit-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::-moz-placeholder {
  color: rgba(173,173,173,1);
}

.c0:-ms-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::placeholder {
  color: rgba(173,173,173,1);
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: hoverColor;
  -moz-var: hoverColor;
  -ms-var: hoverColor;
  var: hoverColor;
  return: hoverColor;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  hoverColor: = color_1.color('shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  hoverColor: = color_1.color('shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  hoverColor: = color_1.color('error.500');
}

<styled.textarea
  className=""
  disabled={false}
  isDisabled={false}
  isError={false}
  isFullWidth={false}
  isInverse={true}
  onChange={[MockFunction]}
  placeholder="input here ..."
  size="md"
>
  <StyledComponent
    className=""
    disabled={false}
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  resize: none;
  border-radius: ",
            [Function],
            ";
  box-sizing: border-box;
  font-family: ",
            [Function],
            ";
  ",
            [Function],
            " ",
            [Function],
            ";
  ::placeholder {
    color: ",
            [Function],
            ";
  }
  :hover:not(:focus) {
    ",
            [Function],
            "
  }
",
          ],
        },
        "displayName": "styled.textarea",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "textarea",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={false}
    isFullWidth={false}
    isInverse={true}
    onChange={[MockFunction]}
    placeholder="input here ..."
    size="md"
  >
    <textarea
      className="c0"
      disabled={false}
      onChange={[MockFunction]}
      placeholder="input here ..."
      size="md"
    />
  </StyledComponent>
</styled.textarea>
`;

exports[`Text area variations of the text area in all given sizes md should render 100% width of with isFullWidth prop 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  resize: none;
  border-radius: 6px;
  box-sizing: border-box;
  font-family: 'Open Sans',sans-serif;
  color: rgba(71,71,71,1);
  width: 100%;
  padding: calc(0.75 * var(--lendi-ui-size)) var(--lendi-ui-size);
  font-size: calc(1.125 * var(--lendi-ui-size));
  border: 1px solid rgba(200,200,200,1);
  background-color: rgba(255,255,255,1);
}

.c0::-webkit-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::-moz-placeholder {
  color: rgba(173,173,173,1);
}

.c0:-ms-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::placeholder {
  color: rgba(173,173,173,1);
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: hoverColor;
  -moz-var: hoverColor;
  -ms-var: hoverColor;
  var: hoverColor;
  return: hoverColor;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  hoverColor: = color_1.color('shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  hoverColor: = color_1.color('shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  hoverColor: = color_1.color('error.500');
}

<styled.textarea
  className=""
  disabled={false}
  isDisabled={false}
  isError={false}
  isFullWidth={true}
  isInverse={false}
  onChange={[MockFunction]}
  placeholder="input here ..."
  size="md"
>
  <StyledComponent
    className=""
    disabled={false}
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  resize: none;
  border-radius: ",
            [Function],
            ";
  box-sizing: border-box;
  font-family: ",
            [Function],
            ";
  ",
            [Function],
            " ",
            [Function],
            ";
  ::placeholder {
    color: ",
            [Function],
            ";
  }
  :hover:not(:focus) {
    ",
            [Function],
            "
  }
",
          ],
        },
        "displayName": "styled.textarea",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "textarea",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={false}
    isFullWidth={true}
    isInverse={false}
    onChange={[MockFunction]}
    placeholder="input here ..."
    size="md"
  >
    <textarea
      className="c0"
      disabled={false}
      onChange={[MockFunction]}
      placeholder="input here ..."
      size="md"
    />
  </StyledComponent>
</styled.textarea>
`;

exports[`Text area variations of the text area in all given sizes md should render the component in a disabled state with the isDisabled prop 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  resize: none;
  border-radius: 6px;
  box-sizing: border-box;
  font-family: 'Open Sans',sans-serif;
  color: rgba(71,71,71,1);
  width: auto;
  padding: calc(0.75 * var(--lendi-ui-size)) var(--lendi-ui-size);
  font-size: calc(1.125 * var(--lendi-ui-size));
  cursor: not-allowed;
  background-color: #f8f8f8;
  border: 1px solid rgba(227,227,227,1);
}

.c0::-webkit-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::-moz-placeholder {
  color: rgba(173,173,173,1);
}

.c0:-ms-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::placeholder {
  color: rgba(173,173,173,1);
}

<styled.textarea
  className=""
  disabled={true}
  isDisabled={true}
  isError={false}
  isFullWidth={false}
  isInverse={false}
  onChange={[MockFunction]}
  placeholder="input here ..."
  size="md"
>
  <StyledComponent
    className=""
    disabled={true}
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  resize: none;
  border-radius: ",
            [Function],
            ";
  box-sizing: border-box;
  font-family: ",
            [Function],
            ";
  ",
            [Function],
            " ",
            [Function],
            ";
  ::placeholder {
    color: ",
            [Function],
            ";
  }
  :hover:not(:focus) {
    ",
            [Function],
            "
  }
",
          ],
        },
        "displayName": "styled.textarea",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "textarea",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={true}
    isError={false}
    isFullWidth={false}
    isInverse={false}
    onChange={[MockFunction]}
    placeholder="input here ..."
    size="md"
  >
    <textarea
      className="c0"
      disabled={true}
      onChange={[MockFunction]}
      placeholder="input here ..."
      size="md"
    />
  </StyledComponent>
</styled.textarea>
`;

exports[`Text area variations of the text area in all given sizes md should render the component with a red border if the isError state is true 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  resize: none;
  border-radius: 6px;
  box-sizing: border-box;
  font-family: 'Open Sans',sans-serif;
  color: rgba(71,71,71,1);
  width: auto;
  padding: calc(0.75 * var(--lendi-ui-size)) var(--lendi-ui-size);
  font-size: calc(1.125 * var(--lendi-ui-size));
  border: 1px solid rgba(255,28,74,1);
  background-color: rgba(255,255,255,1);
}

.c0::-webkit-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::-moz-placeholder {
  color: rgba(173,173,173,1);
}

.c0:-ms-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::placeholder {
  color: rgba(173,173,173,1);
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: hoverColor;
  -moz-var: hoverColor;
  -ms-var: hoverColor;
  var: hoverColor;
  return: hoverColor;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  hoverColor: = color_1.color('shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  hoverColor: = color_1.color('shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  hoverColor: = color_1.color('error.500');
}

<styled.textarea
  className=""
  disabled={false}
  isDisabled={false}
  isError={true}
  isFullWidth={false}
  isInverse={false}
  onChange={[MockFunction]}
  placeholder="input here ..."
  size="md"
>
  <StyledComponent
    className=""
    disabled={false}
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  resize: none;
  border-radius: ",
            [Function],
            ";
  box-sizing: border-box;
  font-family: ",
            [Function],
            ";
  ",
            [Function],
            " ",
            [Function],
            ";
  ::placeholder {
    color: ",
            [Function],
            ";
  }
  :hover:not(:focus) {
    ",
            [Function],
            "
  }
",
          ],
        },
        "displayName": "styled.textarea",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "textarea",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={true}
    isFullWidth={false}
    isInverse={false}
    onChange={[MockFunction]}
    placeholder="input here ..."
    size="md"
  >
    <textarea
      className="c0"
      disabled={false}
      onChange={[MockFunction]}
      placeholder="input here ..."
      size="md"
    />
  </StyledComponent>
</styled.textarea>
`;

exports[`Text area variations of the text area in all given sizes md should render the component with a white border and transparent background if the isInverse prop is true 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  resize: none;
  border-radius: 6px;
  box-sizing: border-box;
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  width: auto;
  padding: calc(0.75 * var(--lendi-ui-size)) var(--lendi-ui-size);
  font-size: calc(1.125 * var(--lendi-ui-size));
  border: 1px solid rgba(248,248,248,1);
  background-color: transparent;
}

.c0::-webkit-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::-moz-placeholder {
  color: rgba(173,173,173,1);
}

.c0:-ms-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::placeholder {
  color: rgba(173,173,173,1);
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: hoverColor;
  -moz-var: hoverColor;
  -ms-var: hoverColor;
  var: hoverColor;
  return: hoverColor;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  hoverColor: = color_1.color('shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  hoverColor: = color_1.color('shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  hoverColor: = color_1.color('error.500');
}

<styled.textarea
  className=""
  disabled={false}
  isDisabled={false}
  isError={false}
  isFullWidth={false}
  isInverse={true}
  onChange={[MockFunction]}
  placeholder="input here ..."
  size="md"
>
  <StyledComponent
    className=""
    disabled={false}
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  resize: none;
  border-radius: ",
            [Function],
            ";
  box-sizing: border-box;
  font-family: ",
            [Function],
            ";
  ",
            [Function],
            " ",
            [Function],
            ";
  ::placeholder {
    color: ",
            [Function],
            ";
  }
  :hover:not(:focus) {
    ",
            [Function],
            "
  }
",
          ],
        },
        "displayName": "styled.textarea",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "textarea",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={false}
    isFullWidth={false}
    isInverse={true}
    onChange={[MockFunction]}
    placeholder="input here ..."
    size="md"
  >
    <textarea
      className="c0"
      disabled={false}
      onChange={[MockFunction]}
      placeholder="input here ..."
      size="md"
    />
  </StyledComponent>
</styled.textarea>
`;

exports[`Text area variations of the text area in all given sizes sm should render 100% width of with isFullWidth prop 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  resize: none;
  border-radius: 6px;
  box-sizing: border-box;
  font-family: 'Open Sans',sans-serif;
  color: rgba(71,71,71,1);
  width: 100%;
  padding: calc(0.75 * var(--lendi-ui-size)) var(--lendi-ui-size);
  font-size: calc(1.125 * var(--lendi-ui-size));
  border: 1px solid rgba(200,200,200,1);
  background-color: rgba(255,255,255,1);
}

.c0::-webkit-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::-moz-placeholder {
  color: rgba(173,173,173,1);
}

.c0:-ms-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::placeholder {
  color: rgba(173,173,173,1);
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: hoverColor;
  -moz-var: hoverColor;
  -ms-var: hoverColor;
  var: hoverColor;
  return: hoverColor;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  hoverColor: = color_1.color('shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  hoverColor: = color_1.color('shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  hoverColor: = color_1.color('error.500');
}

<styled.textarea
  className=""
  disabled={false}
  isDisabled={false}
  isError={false}
  isFullWidth={true}
  isInverse={false}
  onChange={[MockFunction]}
  placeholder="input here ..."
  size="md"
>
  <StyledComponent
    className=""
    disabled={false}
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  resize: none;
  border-radius: ",
            [Function],
            ";
  box-sizing: border-box;
  font-family: ",
            [Function],
            ";
  ",
            [Function],
            " ",
            [Function],
            ";
  ::placeholder {
    color: ",
            [Function],
            ";
  }
  :hover:not(:focus) {
    ",
            [Function],
            "
  }
",
          ],
        },
        "displayName": "styled.textarea",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "textarea",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={false}
    isFullWidth={true}
    isInverse={false}
    onChange={[MockFunction]}
    placeholder="input here ..."
    size="md"
  >
    <textarea
      className="c0"
      disabled={false}
      onChange={[MockFunction]}
      placeholder="input here ..."
      size="md"
    />
  </StyledComponent>
</styled.textarea>
`;

exports[`Text area variations of the text area in all given sizes sm should render the component in a disabled state with the isDisabled prop 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  resize: none;
  border-radius: 6px;
  box-sizing: border-box;
  font-family: 'Open Sans',sans-serif;
  color: rgba(71,71,71,1);
  width: auto;
  padding: calc(0.75 * var(--lendi-ui-size)) var(--lendi-ui-size);
  font-size: calc(1.125 * var(--lendi-ui-size));
  cursor: not-allowed;
  background-color: #f8f8f8;
  border: 1px solid rgba(227,227,227,1);
}

.c0::-webkit-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::-moz-placeholder {
  color: rgba(173,173,173,1);
}

.c0:-ms-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::placeholder {
  color: rgba(173,173,173,1);
}

<styled.textarea
  className=""
  disabled={true}
  isDisabled={true}
  isError={false}
  isFullWidth={false}
  isInverse={false}
  onChange={[MockFunction]}
  placeholder="input here ..."
  size="md"
>
  <StyledComponent
    className=""
    disabled={true}
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  resize: none;
  border-radius: ",
            [Function],
            ";
  box-sizing: border-box;
  font-family: ",
            [Function],
            ";
  ",
            [Function],
            " ",
            [Function],
            ";
  ::placeholder {
    color: ",
            [Function],
            ";
  }
  :hover:not(:focus) {
    ",
            [Function],
            "
  }
",
          ],
        },
        "displayName": "styled.textarea",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "textarea",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={true}
    isError={false}
    isFullWidth={false}
    isInverse={false}
    onChange={[MockFunction]}
    placeholder="input here ..."
    size="md"
  >
    <textarea
      className="c0"
      disabled={true}
      onChange={[MockFunction]}
      placeholder="input here ..."
      size="md"
    />
  </StyledComponent>
</styled.textarea>
`;

exports[`Text area variations of the text area in all given sizes sm should render the component with a red border if the isError state is true 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  resize: none;
  border-radius: 6px;
  box-sizing: border-box;
  font-family: 'Open Sans',sans-serif;
  color: rgba(71,71,71,1);
  width: auto;
  padding: calc(0.75 * var(--lendi-ui-size)) var(--lendi-ui-size);
  font-size: calc(1.125 * var(--lendi-ui-size));
  border: 1px solid rgba(255,28,74,1);
  background-color: rgba(255,255,255,1);
}

.c0::-webkit-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::-moz-placeholder {
  color: rgba(173,173,173,1);
}

.c0:-ms-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::placeholder {
  color: rgba(173,173,173,1);
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: hoverColor;
  -moz-var: hoverColor;
  -ms-var: hoverColor;
  var: hoverColor;
  return: hoverColor;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  hoverColor: = color_1.color('shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  hoverColor: = color_1.color('shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  hoverColor: = color_1.color('error.500');
}

<styled.textarea
  className=""
  disabled={false}
  isDisabled={false}
  isError={true}
  isFullWidth={false}
  isInverse={false}
  onChange={[MockFunction]}
  placeholder="input here ..."
  size="md"
>
  <StyledComponent
    className=""
    disabled={false}
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  resize: none;
  border-radius: ",
            [Function],
            ";
  box-sizing: border-box;
  font-family: ",
            [Function],
            ";
  ",
            [Function],
            " ",
            [Function],
            ";
  ::placeholder {
    color: ",
            [Function],
            ";
  }
  :hover:not(:focus) {
    ",
            [Function],
            "
  }
",
          ],
        },
        "displayName": "styled.textarea",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "textarea",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={true}
    isFullWidth={false}
    isInverse={false}
    onChange={[MockFunction]}
    placeholder="input here ..."
    size="md"
  >
    <textarea
      className="c0"
      disabled={false}
      onChange={[MockFunction]}
      placeholder="input here ..."
      size="md"
    />
  </StyledComponent>
</styled.textarea>
`;

exports[`Text area variations of the text area in all given sizes sm should render the component with a white border and transparent background if the isInverse prop is true 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  resize: none;
  border-radius: 6px;
  box-sizing: border-box;
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  width: auto;
  padding: calc(0.75 * var(--lendi-ui-size)) var(--lendi-ui-size);
  font-size: calc(1.125 * var(--lendi-ui-size));
  border: 1px solid rgba(248,248,248,1);
  background-color: transparent;
}

.c0::-webkit-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::-moz-placeholder {
  color: rgba(173,173,173,1);
}

.c0:-ms-input-placeholder {
  color: rgba(173,173,173,1);
}

.c0::placeholder {
  color: rgba(173,173,173,1);
}

.c0:hover:not(:focus) border:1px solid function (_a) {
  -webkit-var: isInverse = _a.isInverse, isError = _a.isError;
  -moz-var: isInverse = _a.isInverse, isError = _a.isError;
  -ms-var: isInverse = _a.isInverse, isError = _a.isError;
  var: isInverse = _a.isInverse, isError = _a.isError;
  -webkit-var: hoverColor;
  -moz-var: hoverColor;
  -ms-var: hoverColor;
  var: hoverColor;
  return: hoverColor;
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) if (!isInverse) {
  hoverColor: = color_1.color('shade.400');
}

.c0:hover:not(:focus) border:1px solid function (_a) if (!isError) else {
  hoverColor: = color_1.color('shade.0');
}

.c0:hover:not(:focus) border:1px solid function (_a) else {
  hoverColor: = color_1.color('error.500');
}

<styled.textarea
  className=""
  disabled={false}
  isDisabled={false}
  isError={false}
  isFullWidth={false}
  isInverse={true}
  onChange={[MockFunction]}
  placeholder="input here ..."
  size="md"
>
  <StyledComponent
    className=""
    disabled={false}
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "
  ",
            "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
            ";
  resize: none;
  border-radius: ",
            [Function],
            ";
  box-sizing: border-box;
  font-family: ",
            [Function],
            ";
  ",
            [Function],
            " ",
            [Function],
            ";
  ::placeholder {
    color: ",
            [Function],
            ";
  }
  :hover:not(:focus) {
    ",
            [Function],
            "
  }
",
          ],
        },
        "displayName": "styled.textarea",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "textarea",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    isDisabled={false}
    isError={false}
    isFullWidth={false}
    isInverse={true}
    onChange={[MockFunction]}
    placeholder="input here ..."
    size="md"
  >
    <textarea
      className="c0"
      disabled={false}
      onChange={[MockFunction]}
      placeholder="input here ..."
      size="md"
    />
  </StyledComponent>
</styled.textarea>
`;
