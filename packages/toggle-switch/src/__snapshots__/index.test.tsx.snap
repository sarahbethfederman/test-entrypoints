// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ToggleSwitch should render the whole component 1`] = `
.c2 {
  position: absolute;
  opacity: 0;
  height: 0;
  width: 0;
}

.c2:focus ~ span {
  border: 2px solid rgba(102,217,201,1);
  box-shadow: 0 0 3px 0 rgba(0,192,165,0.8);
}

.c1 {
  width: calc(2.5 * var(--lendi-ui-size));
  height: calc(2 * var(--lendi-ui-size));
  position: relative;
  display: inline-block;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  border-radius: 6px;
  box-sizing: border-box;
  margin-left: calc(0.5 * var(--lendi-ui-size));
}

.c3 {
  --width: calc(2.125 * var(--lendi-ui-size));
  --height: calc(0.875 * var(--lendi-ui-size));
  --handle-width: calc(1.25 * var(--lendi-ui-size));
  position: absolute;
  content: '';
  width: var(--width);
  height: var(--height);
  top: calc(50% - var(--height)/2);
  border-radius: 6px;
  margin-left: calc(var(--handle-width) * 0.3);
  margin-right: calc(var(--handle-width) * 0.3);
  box-sizing: border-box;
  background-color: rgba(173,173,173,1);
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

.c4 {
  --width: calc(1.25 * var(--lendi-ui-size));
  --track-width: calc(2.125 * var(--lendi-ui-size));
  --height: var(--width);
  --track-margin: var(--width) * 0.3;
  box-shadow: 0 0 2px 0 rgba(0,0,0,0.1), 0 2px 2px 0 rgba(0,0,0,0.12), 0 1px 3px 0 rgba(0,0,0,0.14);
  position: absolute;
  content: '';
  width: var(--width);
  height: var(--height);
  top: calc(50% - var(--height)/2);
  border: 1px solid transparent;
  background-color: rgba(248,248,248,1);
  border-radius: 50%;
  box-sizing: border-box;
  -webkit-transition: 0.4s;
  transition: 0.4s;
  text-align: center;
}

.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border-radius: 6px;
  min-height: 48px;
  cursor: pointer;
}

.c0:hover > span > div {
  border-color: rgba(0,192,165,1);
}

.c0:active > span > div {
  background-color: rgba(119,119,119,1);
}

.c5 {
  margin-top: 0;
  margin-bottom: 0;
  font-size: var(--lendi-ui-size);
  line-height: calc(24 / 16);
  font-family: 'Open Sans',sans-serif;
  display: inline-block;
  margin-left: calc(0.75 * var(--lendi-ui-size));
}

<ToggleSwitch
  label="Test Toggle Switch"
  onChange={[MockFunction]}
  value="1"
>
  <styled.label
    checked={false}
    disabled={false}
    error={false}
    isBoxed={false}
  >
    <StyledComponent
      checked={false}
      disabled={false}
      error={false}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-jTzLTM",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  ",
              "
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  letter-spacing: normal;
",
              "
  width: 100%;
  display: flex;
  align-items: center;
  border-radius: ",
              [Function],
              ";
  min-height: 48px;

  ",
              [Function],
              "
  
  /* Disabled styles */
  ",
              [Function],
              ";

  /* Hover Styles */
  :hover {
    ",
              [Function],
              ";
  }

  /* Active Styles */
  :active {
    ",
              [Function],
              ";
  }

  /* Hover effects for child div (Toggle Handle) */
  :hover > span > div {
    ",
              [Function],
              ";
  }

  /* Active style for child div (Toggle Handle) */
  :active > span > div {
    ",
              [Function],
              ";
  }
",
            ],
          },
          "displayName": "styled.label",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-jTzLTM",
          "target": "label",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isBoxed={false}
    >
      <label
        checked={false}
        className="c0"
        disabled={false}
      >
        <Toggle
          isChecked={false}
          isDisabled={false}
          isError={false}
          isLoading={false}
          onChange={[MockFunction]}
          size="md"
          value="1"
        >
          <styled.span
            size="md"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-ifAKCX",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  ",
                      [Function],
                      " position: relative;
  display: inline-block;
  appearance: none;
  border-radius: ",
                      [Function],
                      ";
  box-sizing: border-box;
  ",
                      "
    margin-left: ",
                      "calc(0.5 * var(--lendi-ui-size))",
                      ";
  ",
                      ";
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-ifAKCX",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              size="md"
            >
              <span
                className="c1"
                size="md"
              >
                <styled.input
                  checked={false}
                  disabled={false}
                  error={false}
                  isLoading={false}
                  onChange={[MockFunction]}
                  type="checkbox"
                  value="1"
                >
                  <StyledComponent
                    checked={false}
                    disabled={false}
                    error={false}
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bxivhb",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            "
  position: absolute;
  opacity: 0;
  height: 0;
  width: 0;

  /* Focus styles for sibling span (Toggle Track) */
  :focus ~ span {
  ",
                            [Function],
                            ";

  /* Focus styles for sibling div (Toggle Handle) */
  :focus ~ div {
  ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.input",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bxivhb",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    isLoading={false}
                    onChange={[MockFunction]}
                    type="checkbox"
                    value="1"
                  >
                    <input
                      checked={false}
                      className="c2"
                      disabled={false}
                      onChange={[MockFunction]}
                      type="checkbox"
                      value="1"
                    />
                  </StyledComponent>
                </styled.input>
                <styled.span
                  checked={false}
                  disabled={false}
                  error={false}
                  size="md"
                >
                  <StyledComponent
                    checked={false}
                    disabled={false}
                    error={false}
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-EHOje",
                          "isStatic": false,
                          "lastClassName": "c3",
                          "rules": Array [
                            "
  ",
                            [Function],
                            "
  position: absolute;
  content: '';
  width: var(--width);
  height: var(--height);
  top: calc(50% - var(--height)/2);
  border-radius: ",
                            [Function],
                            ";
  margin-left: calc(var(--handle-width) * 0.3);
  margin-right: calc(var(--handle-width) * 0.3);
  box-sizing: border-box;
  ",
                            "
          background-color: ",
                            [Function],
                            ";
        ",
                            "
  transition: 0.4s;

  /* Default Checked */
  ",
                            [Function],
                            "

  /* Disabled styles */
  ",
                            [Function],
                            "

  /* Error styles */
  ",
                            [Function],
                            "
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-EHOje",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    size="md"
                  >
                    <span
                      checked={false}
                      className="c3"
                      disabled={false}
                      size="md"
                    />
                  </StyledComponent>
                </styled.span>
                <styled.div
                  checked={false}
                  disabled={false}
                  error={false}
                  size="md"
                >
                  <StyledComponent
                    checked={false}
                    disabled={false}
                    error={false}
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bZQynM",
                          "isStatic": false,
                          "lastClassName": "c4",
                          "rules": Array [
                            "
  ",
                            [Function],
                            "
  --height: var(--width);
  --track-margin: var(--width) * 0.3;

  ",
                            "box-shadow: 0 0 2px 0 rgba(0, 0, 0, 0.1),
        0 2px 2px 0 rgba(0, 0, 0, 0.12),
        0 1px 3px 0 rgba(0, 0, 0, 0.14);",
                            " position: absolute;
  content: '';
  width: var(--width);
  height: var(--height);
  top: calc(50% - var(--height)/2);
  border: 1px solid transparent;
  ",
                            "
          background-color: ",
                            [Function],
                            ";
        ",
                            "
  border-radius: 50%;
  box-sizing: border-box;
  transition: 0.4s;
  text-align: center;

  /* Default Checked */
  ",
                            [Function],
                            "

  /* Disabled styles */
  ",
                            [Function],
                            "

  /* Error styles */
  ",
                            [Function],
                            "
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bZQynM",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    size="md"
                  >
                    <div
                      checked={false}
                      className="c4"
                      disabled={false}
                      size="md"
                    />
                  </StyledComponent>
                </styled.div>
              </span>
            </StyledComponent>
          </styled.span>
        </Toggle>
        <Styled(styled.p)
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-fjdhpX",
                  "isStatic": false,
                  "lastClassName": "c5",
                  "rules": Array [
                    "
  ",
                    "
    margin-top: ",
                    "0",
                    ";
    margin-bottom: ",
                    "0",
                    ";
  ",
                    "
  ",
                    [Function],
                    "
  ",
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
  ",
                    [Function],
                    "
",
                    ";
",
                    "
  display: inline-block;
  ",
                    "
    margin-left: ",
                    "calc(0.75 * var(--lendi-ui-size))",
                    ";
  ",
                    ";
",
                  ],
                },
                "displayName": "Styled(styled.p)",
                "foldedComponentIds": Array [
                  "sc-htoDjs",
                ],
                "render": [Function],
                "styledComponentId": "sc-fjdhpX",
                "target": "p",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <p
              className="c5"
              size="md"
            >
              Test Toggle Switch
            </p>
          </StyledComponent>
        </Styled(styled.p)>
      </label>
    </StyledComponent>
  </styled.label>
</ToggleSwitch>
`;
