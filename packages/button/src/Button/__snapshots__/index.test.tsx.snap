// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button emphasis should not render full width 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(255,112,99,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(255,140,130,1);
}

.c0:hover {
  background-color: rgba(255,140,130,1);
}

.c0:active {
  background-color: rgba(204,89,79,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button emphasis should not render inverse styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(255,112,99,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(255,140,130,1);
}

.c0:hover {
  background-color: rgba(255,140,130,1);
}

.c0:active {
  background-color: rgba(204,89,79,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button emphasis should render "lg" size styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(4 * var(--lendi-ui-size));
  padding: 0 calc(1.5 * var(--lendi-ui-size));
  font-size: var(--lendi-ui-size);
  -webkit-letter-spacing: calc(0.075 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.075 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.075 * var(--lendi-ui-size));
  letter-spacing: calc(0.075 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(255,112,99,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(255,140,130,1);
}

.c0:hover {
  background-color: rgba(255,140,130,1);
}

.c0:active {
  background-color: rgba(204,89,79,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="lg"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="lg"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="lg"
          >
            <span
              className="c2"
              size="lg"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="lg"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="lg"
          >
            <span
              className="c3"
              size="lg"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button emphasis should render "md" size styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(255,112,99,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(255,140,130,1);
}

.c0:hover {
  background-color: rgba(255,140,130,1);
}

.c0:active {
  background-color: rgba(204,89,79,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button emphasis should render "sm" size styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(2.5 * var(--lendi-ui-size));
  padding: 0 calc(0.75 * var(--lendi-ui-size));
  font-size: calc(0.75 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.05 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.05 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.05 * var(--lendi-ui-size));
  letter-spacing: calc(0.05 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(255,112,99,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(255,140,130,1);
}

.c0:hover {
  background-color: rgba(255,140,130,1);
}

.c0:active {
  background-color: rgba(204,89,79,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: calc(0.5 * var(--lendi-ui-size));
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: calc(0.5 * var(--lendi-ui-size));
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="sm"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="sm"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="sm"
          >
            <span
              className="c2"
              size="sm"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="sm"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="sm"
          >
            <span
              className="c3"
              size="sm"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button emphasis should render "xs" size styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  border-radius: 21px;
  padding: calc(0.5 * var(--lendi-ui-size)) calc(0.5625 * var(--lendi-ui-size));
  font-size: calc(0.625 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(255,112,99,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(255,140,130,1);
}

.c0:hover {
  background-color: rgba(255,140,130,1);
}

.c0:active {
  background-color: rgba(204,89,79,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: calc(0.5 * var(--lendi-ui-size));
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: calc(0.5 * var(--lendi-ui-size));
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="xs"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="xs"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="xs"
          >
            <span
              className="c2"
              size="xs"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="xs"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="xs"
          >
            <span
              className="c3"
              size="xs"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button emphasis should render disabled button 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  pointer-events: inherit;
  cursor: not-allowed;
  opacity: 0.4;
  box-shadow: none;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
  color: rgba(255,255,255,1);
  background-color: rgba(255,112,99,1);
  background-color: rgba(255,112,99,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:hover,
.c0:active,
.c0:focus {
  pointer-events: inherit;
  cursor: not-allowed;
  opacity: 0.4;
  box-shadow: none;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c0:focus {
  background-color: rgba(255,140,130,1);
}

.c0:hover {
  background-color: rgba(255,140,130,1);
}

.c0:active {
  background-color: rgba(204,89,79,1);
}

.c0:hover,
.c0:active,
.c0:focus {
  background-color: rgba(255,112,99,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  disabled={true}
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button emphasis should render full width 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  width: 100%;
  color: rgba(255,255,255,1);
  background-color: rgba(255,112,99,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(255,140,130,1);
}

.c0:hover {
  background-color: rgba(255,140,130,1);
}

.c0:active {
  background-color: rgba(204,89,79,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button emphasis should render normal button 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(255,112,99,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(255,140,130,1);
}

.c0:hover {
  background-color: rgba(255,140,130,1);
}

.c0:active {
  background-color: rgba(204,89,79,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  disabled={false}
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button emphasis should render normal styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(255,112,99,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(255,140,130,1);
}

.c0:hover {
  background-color: rgba(255,140,130,1);
}

.c0:active {
  background-color: rgba(204,89,79,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button empty should render "lg" size styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(4 * var(--lendi-ui-size));
  padding: 0 calc(1.5 * var(--lendi-ui-size));
  font-size: var(--lendi-ui-size);
  -webkit-letter-spacing: calc(0.075 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.075 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.075 * var(--lendi-ui-size));
  letter-spacing: calc(0.075 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border: 1px solid rgba(0,192,165,1);
  border-style: dashed;
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  border-color: rgba(50,204,183,1);
}

.c0:hover {
  border-color: rgba(50,204,183,1);
}

.c0:active {
  color: rgba(0,153,132,1);
  background-color: rgba(229,248,246,1);
  border-color: rgba(0,153,132,1);
}

.c0:disabled:hover,
.c0:disabled:active,
.c0:disabled:focus {
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border-color: rgba(0,192,165,1);
}

.c0:focus {
  border-width: 1px;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="lg"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="lg"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="lg"
          >
            <span
              className="c2"
              size="lg"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="lg"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="lg"
          >
            <span
              className="c3"
              size="lg"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button empty should render "md" size styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border: 1px solid rgba(0,192,165,1);
  border-style: dashed;
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  border-color: rgba(50,204,183,1);
}

.c0:hover {
  border-color: rgba(50,204,183,1);
}

.c0:active {
  color: rgba(0,153,132,1);
  background-color: rgba(229,248,246,1);
  border-color: rgba(0,153,132,1);
}

.c0:disabled:hover,
.c0:disabled:active,
.c0:disabled:focus {
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border-color: rgba(0,192,165,1);
}

.c0:focus {
  border-width: 1px;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button empty should render "sm" size styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(2.5 * var(--lendi-ui-size));
  padding: 0 calc(0.75 * var(--lendi-ui-size));
  font-size: calc(0.75 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.05 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.05 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.05 * var(--lendi-ui-size));
  letter-spacing: calc(0.05 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border: 1px solid rgba(0,192,165,1);
  border-style: dashed;
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  border-color: rgba(50,204,183,1);
}

.c0:hover {
  border-color: rgba(50,204,183,1);
}

.c0:active {
  color: rgba(0,153,132,1);
  background-color: rgba(229,248,246,1);
  border-color: rgba(0,153,132,1);
}

.c0:disabled:hover,
.c0:disabled:active,
.c0:disabled:focus {
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border-color: rgba(0,192,165,1);
}

.c0:focus {
  border-width: 1px;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: calc(0.5 * var(--lendi-ui-size));
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: calc(0.5 * var(--lendi-ui-size));
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="sm"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="sm"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="sm"
          >
            <span
              className="c2"
              size="sm"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="sm"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="sm"
          >
            <span
              className="c3"
              size="sm"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button empty should render "xs" size styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  border-radius: 21px;
  padding: calc(0.5 * var(--lendi-ui-size)) calc(0.5625 * var(--lendi-ui-size));
  font-size: calc(0.625 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border: 1px solid rgba(0,192,165,1);
  border-style: dashed;
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  border-color: rgba(50,204,183,1);
}

.c0:hover {
  border-color: rgba(50,204,183,1);
}

.c0:active {
  color: rgba(0,153,132,1);
  background-color: rgba(229,248,246,1);
  border-color: rgba(0,153,132,1);
}

.c0:disabled:hover,
.c0:disabled:active,
.c0:disabled:focus {
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border-color: rgba(0,192,165,1);
}

.c0:focus {
  border-width: 1px;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: calc(0.5 * var(--lendi-ui-size));
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: calc(0.5 * var(--lendi-ui-size));
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="xs"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="xs"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="xs"
          >
            <span
              className="c2"
              size="xs"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="xs"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="xs"
          >
            <span
              className="c3"
              size="xs"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button empty should render inverse styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: transparent;
  border: 1px solid rgba(255,255,255,1);
  border-style: dashed;
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:active {
  opacity: 0.9;
}

.c0:focus {
  border-width: 1px;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button empty should render normal styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border: 1px solid rgba(0,192,165,1);
  border-style: dashed;
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  border-color: rgba(50,204,183,1);
}

.c0:hover {
  border-color: rgba(50,204,183,1);
}

.c0:active {
  color: rgba(0,153,132,1);
  background-color: rgba(229,248,246,1);
  border-color: rgba(0,153,132,1);
}

.c0:disabled:hover,
.c0:disabled:active,
.c0:disabled:focus {
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border-color: rgba(0,192,165,1);
}

.c0:focus {
  border-width: 1px;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button primary should not render full width 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(50,204,183,1);
}

.c0:hover {
  background-color: rgba(50,204,183,1);
}

.c0:active {
  background-color: rgba(0,153,132,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button primary should render "lg" size styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(4 * var(--lendi-ui-size));
  padding: 0 calc(1.5 * var(--lendi-ui-size));
  font-size: var(--lendi-ui-size);
  -webkit-letter-spacing: calc(0.075 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.075 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.075 * var(--lendi-ui-size));
  letter-spacing: calc(0.075 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(50,204,183,1);
}

.c0:hover {
  background-color: rgba(50,204,183,1);
}

.c0:active {
  background-color: rgba(0,153,132,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="lg"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="lg"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="lg"
          >
            <span
              className="c2"
              size="lg"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="lg"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="lg"
          >
            <span
              className="c3"
              size="lg"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button primary should render "md" size styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(50,204,183,1);
}

.c0:hover {
  background-color: rgba(50,204,183,1);
}

.c0:active {
  background-color: rgba(0,153,132,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button primary should render "sm" size styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(2.5 * var(--lendi-ui-size));
  padding: 0 calc(0.75 * var(--lendi-ui-size));
  font-size: calc(0.75 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.05 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.05 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.05 * var(--lendi-ui-size));
  letter-spacing: calc(0.05 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(50,204,183,1);
}

.c0:hover {
  background-color: rgba(50,204,183,1);
}

.c0:active {
  background-color: rgba(0,153,132,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: calc(0.5 * var(--lendi-ui-size));
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: calc(0.5 * var(--lendi-ui-size));
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="sm"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="sm"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="sm"
          >
            <span
              className="c2"
              size="sm"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="sm"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="sm"
          >
            <span
              className="c3"
              size="sm"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button primary should render "xs" size styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  border-radius: 21px;
  padding: calc(0.5 * var(--lendi-ui-size)) calc(0.5625 * var(--lendi-ui-size));
  font-size: calc(0.625 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(50,204,183,1);
}

.c0:hover {
  background-color: rgba(50,204,183,1);
}

.c0:active {
  background-color: rgba(0,153,132,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: calc(0.5 * var(--lendi-ui-size));
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: calc(0.5 * var(--lendi-ui-size));
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="xs"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="xs"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="xs"
          >
            <span
              className="c2"
              size="xs"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="xs"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="xs"
          >
            <span
              className="c3"
              size="xs"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button primary should render disabled button 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  pointer-events: inherit;
  cursor: not-allowed;
  opacity: 0.4;
  box-shadow: none;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
  background-color: rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:hover,
.c0:active,
.c0:focus {
  pointer-events: inherit;
  cursor: not-allowed;
  opacity: 0.4;
  box-shadow: none;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c0:focus {
  background-color: rgba(50,204,183,1);
}

.c0:hover {
  background-color: rgba(50,204,183,1);
}

.c0:active {
  background-color: rgba(0,153,132,1);
}

.c0:hover,
.c0:active,
.c0:focus {
  background-color: rgba(0,192,165,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  disabled={true}
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button primary should render full width 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  width: 100%;
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(50,204,183,1);
}

.c0:hover {
  background-color: rgba(50,204,183,1);
}

.c0:active {
  background-color: rgba(0,153,132,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button primary should render inverse styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:active {
  opacity: 0.9;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button primary should render normal button 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(50,204,183,1);
}

.c0:hover {
  background-color: rgba(50,204,183,1);
}

.c0:active {
  background-color: rgba(0,153,132,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  disabled={false}
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button primary should render normal styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(50,204,183,1);
}

.c0:hover {
  background-color: rgba(50,204,183,1);
}

.c0:active {
  background-color: rgba(0,153,132,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button secondary should render "lg" size styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(4 * var(--lendi-ui-size));
  padding: 0 calc(1.5 * var(--lendi-ui-size));
  font-size: var(--lendi-ui-size);
  -webkit-letter-spacing: calc(0.075 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.075 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.075 * var(--lendi-ui-size));
  letter-spacing: calc(0.075 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border: 1px solid rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  border-color: rgba(50,204,183,1);
}

.c0:hover {
  border-color: rgba(50,204,183,1);
}

.c0:active {
  color: rgba(0,153,132,1);
  background-color: rgba(229,248,246,1);
  border-color: rgba(0,153,132,1);
}

.c0:disabled:hover,
.c0:disabled:active,
.c0:disabled:focus {
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border-color: rgba(0,192,165,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="lg"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="lg"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="lg"
          >
            <span
              className="c2"
              size="lg"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="lg"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="lg"
          >
            <span
              className="c3"
              size="lg"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button secondary should render "md" size styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border: 1px solid rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  border-color: rgba(50,204,183,1);
}

.c0:hover {
  border-color: rgba(50,204,183,1);
}

.c0:active {
  color: rgba(0,153,132,1);
  background-color: rgba(229,248,246,1);
  border-color: rgba(0,153,132,1);
}

.c0:disabled:hover,
.c0:disabled:active,
.c0:disabled:focus {
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border-color: rgba(0,192,165,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button secondary should render "sm" size styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(2.5 * var(--lendi-ui-size));
  padding: 0 calc(0.75 * var(--lendi-ui-size));
  font-size: calc(0.75 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.05 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.05 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.05 * var(--lendi-ui-size));
  letter-spacing: calc(0.05 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border: 1px solid rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  border-color: rgba(50,204,183,1);
}

.c0:hover {
  border-color: rgba(50,204,183,1);
}

.c0:active {
  color: rgba(0,153,132,1);
  background-color: rgba(229,248,246,1);
  border-color: rgba(0,153,132,1);
}

.c0:disabled:hover,
.c0:disabled:active,
.c0:disabled:focus {
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border-color: rgba(0,192,165,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: calc(0.5 * var(--lendi-ui-size));
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: calc(0.5 * var(--lendi-ui-size));
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="sm"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="sm"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="sm"
          >
            <span
              className="c2"
              size="sm"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="sm"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="sm"
          >
            <span
              className="c3"
              size="sm"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button secondary should render "xs" size styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  border-radius: 21px;
  padding: calc(0.5 * var(--lendi-ui-size)) calc(0.5625 * var(--lendi-ui-size));
  font-size: calc(0.625 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border: 1px solid rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  border-color: rgba(50,204,183,1);
}

.c0:hover {
  border-color: rgba(50,204,183,1);
}

.c0:active {
  color: rgba(0,153,132,1);
  background-color: rgba(229,248,246,1);
  border-color: rgba(0,153,132,1);
}

.c0:disabled:hover,
.c0:disabled:active,
.c0:disabled:focus {
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border-color: rgba(0,192,165,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: calc(0.5 * var(--lendi-ui-size));
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: calc(0.5 * var(--lendi-ui-size));
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="xs"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="xs"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="xs"
          >
            <span
              className="c2"
              size="xs"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="xs"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="xs"
          >
            <span
              className="c3"
              size="xs"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button secondary should render inverse styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: transparent;
  border: 1px solid rgba(255,255,255,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:active {
  opacity: 0.9;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button secondary should render normal styles 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border: 1px solid rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  border-color: rgba(50,204,183,1);
}

.c0:hover {
  border-color: rgba(50,204,183,1);
}

.c0:active {
  color: rgba(0,153,132,1);
  background-color: rgba(229,248,246,1);
  border-color: rgba(0,153,132,1);
}

.c0:disabled:hover,
.c0:disabled:active,
.c0:disabled:focus {
  color: rgba(0,192,165,1);
  background-color: rgba(255,255,255,1);
  border-color: rgba(0,192,165,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button should not render full width 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(50,204,183,1);
}

.c0:hover {
  background-color: rgba(50,204,183,1);
}

.c0:active {
  background-color: rgba(0,153,132,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button should not render full width 2`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(50,204,183,1);
}

.c0:hover {
  background-color: rgba(50,204,183,1);
}

.c0:active {
  background-color: rgba(0,153,132,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button should render disabled button 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  pointer-events: inherit;
  cursor: not-allowed;
  opacity: 0.4;
  box-shadow: none;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
  background-color: rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:hover,
.c0:active,
.c0:focus {
  pointer-events: inherit;
  cursor: not-allowed;
  opacity: 0.4;
  box-shadow: none;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c0:focus {
  background-color: rgba(50,204,183,1);
}

.c0:hover {
  background-color: rgba(50,204,183,1);
}

.c0:active {
  background-color: rgba(0,153,132,1);
}

.c0:hover,
.c0:active,
.c0:focus {
  background-color: rgba(0,192,165,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  disabled={true}
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button should render disabled button 2`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  pointer-events: inherit;
  cursor: not-allowed;
  opacity: 0.4;
  box-shadow: none;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
  background-color: rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:hover,
.c0:active,
.c0:focus {
  pointer-events: inherit;
  cursor: not-allowed;
  opacity: 0.4;
  box-shadow: none;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c0:focus {
  background-color: rgba(50,204,183,1);
}

.c0:hover {
  background-color: rgba(50,204,183,1);
}

.c0:active {
  background-color: rgba(0,153,132,1);
}

.c0:hover,
.c0:active,
.c0:focus {
  background-color: rgba(0,192,165,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  disabled={true}
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button should render full width 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  width: 100%;
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(50,204,183,1);
}

.c0:hover {
  background-color: rgba(50,204,183,1);
}

.c0:active {
  background-color: rgba(0,153,132,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button should render full width 2`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  width: 100%;
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(50,204,183,1);
}

.c0:hover {
  background-color: rgba(50,204,183,1);
}

.c0:active {
  background-color: rgba(0,153,132,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button should render normal button 1`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(50,204,183,1);
}

.c0:hover {
  background-color: rgba(50,204,183,1);
}

.c0:active {
  background-color: rgba(0,153,132,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  disabled={false}
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;

exports[`Button should render normal button 2`] = `
.c0 {
  box-sizing: border-box;
  line-height: 1.333;
  white-space: normal;
  border-spacing: 2px;
  text-align: left;
  word-spacing: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  cursor: pointer;
  box-sizing: border-box;
  border: none;
  border-radius: 6px;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  text-transform: uppercase;
  height: calc(3 * var(--lendi-ui-size));
  padding: 0 var(--lendi-ui-size);
  font-size: calc(0.875 * var(--lendi-ui-size));
  -webkit-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -moz-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  -ms-letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  letter-spacing: calc(0.0625 * var(--lendi-ui-size));
  font-family: 'Open Sans',sans-serif;
  color: rgba(255,255,255,1);
  background-color: rgba(0,192,165,1);
}

.c0:focus {
  outline: none;
  box-shadow: 0 3px 3px 0 rgba(0,0,0,0.1), 0 3px 4px 0 rgba(0,0,0,0.12), 0 1px 8px 0 rgba(0,0,0,0.14);
}

.c0:hover {
  box-shadow: 0 12px 17px 2px rgba(0,0,0,0.1), 0 5px 22px 4px rgba(0,0,0,0.12), 0 7px 8px 0 rgba(0,0,0,0.14);
}

.c0:active {
  -webkit-transform: scale(0.98);
  -ms-transform: scale(0.98);
  transform: scale(0.98);
}

.c0:focus {
  background-color: rgba(50,204,183,1);
}

.c0:hover {
  background-color: rgba(50,204,183,1);
}

.c0:active {
  background-color: rgba(0,153,132,1);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  margin-right: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  margin-left: var(--lendi-ui-size);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<button
  aria-label="Click me!"
  className="c0"
  disabled={false}
  size="md"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c2"
              size="md"
            />
          </StyledComponent>
        </styled.span>
        <span>
          Click me!
        </span>
        <styled.span
          size="md"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  ",
                    [Function],
                    ";
  display: flex;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "span",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            size="md"
          >
            <span
              className="c3"
              size="md"
            />
          </StyledComponent>
        </styled.span>
      </div>
    </StyledComponent>
  </styled.div>
</button>
`;
